#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctosapi.h>
#include <ctype.h>
#include <EMVAPLib.h>
#include <EMVLib.h>

#include "../Includes/wub_lib.h"
#include "../Includes/myEZLib.h"
#include "../Includes/msg.h"

#include "Print.h"
#include "../FileModule/myFileFunc.h"
#include "../UI/Display.h"
#include "../Includes/POSTypedef.h"
#include "..\Includes\CTOSInput.h"
#include "../accum/accum.h"
#include "../DataBase/DataBaseFunc.h"
#include "..\debug\debug.h"
#include "..\Includes\Showbmp.h"
#include "..\Includes\POSHost.h"
#include "..\Includes\POSTrans.h"
#include "..\Includes\POSSetting.h"
#include "..\Includes\MultiApLib.h"
#include "..\Aptrans\MultiAptrans.h"
#include "..\Aptrans\MultiShareEMV.h"


const BYTE baPrinterBufferLogo_Single[]={ //Width=60, Height=49
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                         
                                                                                       
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x18,0x18,0x8C,0xC4,0xC6,      
    0x66,0x66,0x22,0x22,0x22,0x22,0x22,0x62,0x66,0x46,0xC4,0x84,0x8C,0x18,0x10,0x30,      
    0x60,0xC0,0xC0,0xE0,0x38,0x0E,0x07,0x1E,0x38,0xE0,0x80,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                         
                                                                                       
    0x00,0x00,0x00,0x00,0xC0,0xF8,0x0E,0x03,0x81,0xF0,0x1C,0x0E,0x03,0xC1,0xF0,0xF8,      
    0x7C,0x3C,0x1C,0x1E,0x1E,0x1E,0xFE,0xFC,0xFC,0xFC,0xF8,0xF0,0xC1,0x83,0xCE,0x7C,      
    0x1C,0x07,0x81,0xE0,0x70,0x1C,0x0E,0x1C,0x70,0xC0,0x83,0x07,0x1C,0x70,0xE0,0x80,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                         
                                                                                      
    0x00,0x00,0x00,0x00,0x0F,0x7F,0xC0,0x00,0x03,0x3F,0xF0,0x80,0x00,0x0F,0x3F,0x7F,  
    0xFF,0xFC,0xFC,0xFC,0xFC,0xFE,0xF3,0xFB,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x81,0xE0,  
    0x38,0x0E,0x03,0xC0,0xF0,0x1C,0x1C,0x38,0xE0,0x81,0x03,0x0E,0x38,0x70,0xC0,0x03,  
    0x0E,0x1C,0x70,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xE0,  
    0xF0,0x78,0x18,0x18,0x0C,0x0C,0x0C,0x0C,0x08,0x18,0x38,0x30,0x00,0x00,0x00,0x00,  
    0x80,0x80,0xC0,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x80,0xC0,  
    0xC0,0xC0,0xC0,0x80,0x00,0x00,0xC0,0xFC,0xFC,0xFC,0xC0,0xC0,0x00,0xFC,0xFC,0xFC,  
    0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,  
    0x80,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,  
    0x0C,0xFC,0xFC,0xFC,0x0C,0x0C,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,  
    0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,  
    0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x80,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,  
    0xC0,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x80,  
    0xC0,0xC0,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,  
    0x00,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,  
    0xC0,0xC0,0xC0,0x80,0x80,0xC0,0xC0,0xC0,0x00,0x00,0x40,0xC0,0xC0,0x80,0x00,0x00,  
    0x00,0x00,0x80,0xC0,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xE0,  
    0xF0,0x78,0x18,0x18,0x0C,0x0C,0x0C,0x0C,0x0C,0x18,0x38,0x30,0x00,0x00,0x00,0x00,  
    0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0xC0,0xC0,0xFC,0xFC,0xFC,0xC0,0x00,0x00,  
    0x00,0x80,0xC0,0xC0,0xC0,0xC0,0x80,0x80,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                     
                                                                                      
    0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x0E,0x18,0x30,0x61,0x63,0xC6,0x8C,0x88,  
    0x98,0x98,0x11,0x11,0x11,0x11,0x11,0x11,0x90,0x98,0x88,0x8C,0xC6,0x63,0x61,0x30,  
    0x18,0x0C,0x07,0x01,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x1C,0x70,0xE0,0x81,0x07,  
    0x0E,0x38,0xE0,0xC1,0x07,0x0E,0x38,0x70,0xC0,0x00,0x00,0x00,0x00,0x00,0x0F,0x3F,  
    0x7F,0xF0,0xC0,0xC0,0x80,0x80,0x80,0x80,0xC0,0xC0,0xE0,0x60,0x00,0x00,0x00,0x3F,  
    0xFF,0xFF,0xC1,0x80,0x80,0x80,0xC1,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xCF,0x8F,  
    0x9E,0x9C,0xFC,0xF8,0x20,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,  
    0x00,0x00,0x3E,0x7F,0xFF,0xCD,0x8C,0x8C,0x8C,0x8C,0xCF,0xCF,0x0E,0x08,0x00,0x03,  
    0xC7,0x8F,0x8E,0x9C,0xFC,0xF9,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x3E,0x7F,0xFF,0xCD,0xCC,0x8C,0x8C,0x8C,  
    0xCF,0xCF,0x0F,0x0C,0x00,0x00,0x1C,0x7F,0xFF,0xE3,0xC1,0x80,0x80,0x80,0xC1,0xC1,  
    0x41,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x01,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,  
    0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x00,0x00,0x08,0x3E,0x7F,0xFF,  
    0xC1,0x80,0x80,0x80,0xC1,0xFF,0x7F,0x3E,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x3E,  
    0x7F,0xFF,0xC1,0x80,0x80,0x80,0xC1,0xE3,0x7F,0x3F,0x08,0x00,0x0C,0x7F,0xFF,0xE3,  
    0xC1,0x80,0x80,0x80,0xC1,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0x0F,0x3F,0xFC,0xF0,  
    0xF8,0x7E,0x1F,0x07,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x3F,  
    0x7F,0xF0,0xC0,0xC0,0x80,0x80,0x80,0x80,0xC0,0xC0,0xE0,0x60,0x00,0x00,0x08,0x3E,  
    0x7F,0xFF,0xC1,0x80,0x80,0x80,0xC1,0xFF,0x7F,0x3E,0x00,0x00,0x80,0xC0,0xC0,0x00,  
    0x00,0x00,0x00,0x00,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0xFF,0xFF,0xFF,0x80,0x80,0x80,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x1C,  
    0x7F,0xFF,0xE1,0xC0,0x80,0x80,0xC0,0xE1,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xC0,0xC0,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                     
                                                                                      
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,  
    0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,  
    0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,  
    0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x01,0x01,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,  
    0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,  
    0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0E,0x0E,  
    0x0D,0x09,0x09,0x08,0x0C,0x0F,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x0C,0x0F,0x0F,  
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,  
    0x00,0x00,0x00,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  
    0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,  
    0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x01,  
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                                     
};

TRANS_TOTAL stBankTotal;
BOOL	fRePrintFlag = FALSE; 

static CTOS_FONT_ATTRIB stgFONT_ATTRIB;

void vdSetGolbFontAttrib(USHORT FontSize, USHORT X_Zoom, USHORT Y_Zoom, USHORT X_Space, USHORT Y_Space)
{
    memset(&stgFONT_ATTRIB, 0x00, sizeof(stgFONT_ATTRIB));
    
    stgFONT_ATTRIB.FontSize = FontSize;      // Font Size = 12x24
	stgFONT_ATTRIB.X_Zoom = X_Zoom;		    // The width magnifies X_Zoom diameters
	stgFONT_ATTRIB.Y_Zoom = Y_Zoom;		    // The height magnifies Y_Zoom diameters

    stgFONT_ATTRIB.X_Space = X_Space;      // The width of the space between the font with next font
    stgFONT_ATTRIB.Y_Space = Y_Space;      // The Height of the space between the font with next font      
    
}

short printCheckPaper(void)
{
	unsigned short inRet;
	unsigned char key;
	
	while(1)
	{
		inRet = CTOS_PrinterStatus();
		if (inRet==d_OK)
			return 0;
		else if(inRet==d_PRINTER_PAPER_OUT)
		{
			vduiClearBelow(3);
			vduiWarningSound();
			vduiDisplayStringCenter(3,"PRINTER OUT OF");
			vduiDisplayStringCenter(4,"PAPER, INSERT");
			vduiDisplayStringCenter(5,"PAPER AND PRESS");
			vduiDisplayStringCenter(6,"ANY TO PRINT.");
			vduiDisplayStringCenter(8,"[X] CANCEL PRINT");

			CTOS_KBDGet(&key);
			if(key==d_KBD_CANCEL)
				return -1;	
		}		
	}	
}


void cardMasking(char *szPan, int style)
{
    int num;
    int i;
	char szTemp[30];
    if (style == PRINT_CARD_MASKING_1)
    {
        num = strlen(szPan) - 10;
        if (num > 0)
        {
            for (i = 0; i < num; i++)
            {
                szPan[6+i] = '*';
            }
        }
    }
    else if (style == PRINT_CARD_MASKING_2)
    {
        num = strlen(szPan) - 12;
        if (num > 0)
        {
            for (i = 0; i < num; i++)
            {
                szPan[12+i] = '*';
            }
        }
    }

	else if (style == PRINT_CARD_MASKING_3)
	{
	    memset(szTemp, 0x00, sizeof(szTemp));

		strcpy(szTemp,"**** **** **** ");
		num = strlen(szPan) - 4;

		//for (i = 0; i < num; i++)
		//{
		//	szTemp[i] = '*';
		//}

		memcpy(&szTemp[num+3],&szPan[num],4);
		strcpy(szPan,szTemp);
	}


}

USHORT printDateTime(void)
{
    char szStr[d_LINE_SIZE + 1];
    char szTemp[d_LINE_SIZE + 1];
    char szTemp1[d_LINE_SIZE + 1];
    USHORT result;
    BYTE baTemp[PAPER_X_SIZE * 64];
  	CTOS_RTC SetRTC;
	char szYear[3];
//1102
	char sMonth[4];
	char szTempMonth[3];
	char szMonthNames[40];

	memset(sMonth,0x00,4);
	memset(szMonthNames,0x00,40);
	strcpy(szMonthNames,"JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC");
	memset(szTempMonth, 0x00, 3);

//1102
	
    memset(szStr, ' ', d_LINE_SIZE);
    memset(szTemp, ' ', d_LINE_SIZE);


	CTOS_RTCGet(&SetRTC);
	sprintf(szYear ,"%02d",SetRTC.bYear);
	memcpy(srTransRec.szYear,szYear,2);
	vdDebug_LogPrintf("year[%s],date[%02x][%02x]",srTransRec.szYear,srTransRec.szDate[0],srTransRec.szDate[1]);
    wub_hex_2_str(srTransRec.szDate, szTemp,DATE_BCD_SIZE);
    wub_hex_2_str(srTransRec.szTime, szTemp1,TIME_BCD_SIZE);
	vdDebug_LogPrintf("date[%s],time[%s]atol(szTemp)=[%d](atol(szTemp1)=[%d]",szTemp,szTemp1,atol(szTemp),atol(szTemp1) );

	if(atol(szTemp) == 0)
	{
		//sprintf(szTemp ,"%02d%02d",SetRTC.bDay,SetRTC.bMonth);
		sprintf(szTemp ,"%02d%02d",SetRTC.bMonth, SetRTC.bDay);	

	}
	
	if(atol(szTemp1) == 0)
	{
		sprintf(szTemp1 ,"%02d%02d%02d",SetRTC.bHour,SetRTC.bMinute,SetRTC.bSecond);	
	}
	vdDebug_LogPrintf("date[%s],time[%s]",szTemp,szTemp1);
//1102	
    //sprintf(szStr,"DATE/TIME : %02lu/%02lu/%02lu    %02lu:%02lu:%02lu",atol(szTemp)%100,atol(szTemp)/100,atol(srTransRec.szYear),atol(szTemp1)/10000,atol(szTemp1)%10000/100, atol(szTemp1)%100);
	memcpy(szTempMonth,&szTemp[0],2);
	memcpy(sMonth, &szMonthNames[(atoi(szTempMonth) - 1)* 3], 3);
	sprintf(szStr,"DATE/TIME :%s %02lu, %02lu    %02lu:%02lu:%02lu",sMonth,atol(szTemp)%100,atol(srTransRec.szYear),atol(szTemp1)/10000,atol(szTemp1)%10000/100, atol(szTemp1)%100);
//1102    
    memset (baTemp, 0x00, sizeof(baTemp));		

    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
    
    return(result);
     
}

USHORT printTIDMID(void)
{
    char szStr[d_LINE_SIZE + 1];
    USHORT result;
    BYTE baTemp[PAPER_X_SIZE * 64];
	
	memset(szStr, ' ', d_LINE_SIZE);
    sprintf(szStr, "TERM# %s            MER# %s", srTransRec.szTID,srTransRec.szMID);
    memset (baTemp, 0x00, sizeof(baTemp));		 
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

//    memset(szStr, ' ', d_LINE_SIZE);
//    sprintf(szStr, "MER# %s", srTransRec.szMID);
//    memset (baTemp, 0x00, sizeof(baTemp));		 
//    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
//    result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 



    return (result);

}

USHORT printBatchInvoiceNO(void)
{
    char szStr[d_LINE_SIZE + 1];
    char szTemp1[d_LINE_SIZE + 1];
    char szTemp2[d_LINE_SIZE + 1];
    USHORT result;
    BYTE baTemp[PAPER_X_SIZE * 64];
        
    memset(szStr, ' ', d_LINE_SIZE);
    memset(szTemp1, ' ', d_LINE_SIZE);
    memset(szTemp2, ' ', d_LINE_SIZE);
	
	wub_hex_2_str(srTransRec.szBatchNo,szTemp1,3);
    wub_hex_2_str(srTransRec.szInvoiceNo, szTemp2, INVOICE_BCD_SIZE);
    vdMyEZLib_LogPrintf("invoice no: %s",szTemp2);
    sprintf(szStr, "BATCH NO. %s              TRACE NO. %s", szTemp1, szTemp2);
    memset (baTemp, 0x00, sizeof(baTemp));		

    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
    return(result);
}


USHORT printBatchNO(void)
{
    char szStr[d_LINE_SIZE + 1];
    char szTemp[d_LINE_SIZE + 1];
    BYTE baTemp[PAPER_X_SIZE * 64];
    USHORT result;
	char szBuff[46];
 
    memset(szStr, ' ', d_LINE_SIZE);
    memset(szTemp, ' ', d_LINE_SIZE);
	memset(szBuff,0x00,sizeof(szBuff));
	wub_hex_2_str(srTransRec.szBatchNo,szTemp,3);
    sprintf(szStr, "BATCH %s", szTemp);
	sprintf(szBuff,"HOST             %s",srTransRec.szHostLabel);
	
	inPrintLeftRight(szStr,szBuff,46);
}


USHORT printHostLabel(void)
{
    char szStr[d_LINE_SIZE + 1];
    BYTE baTemp[PAPER_X_SIZE * 64];
    USHORT result;

    memset(szStr, 0x00, sizeof(szStr));
    sprintf(szStr, "HOST: %s", srTransRec.szHostLabel);
    memset (baTemp, 0x00, sizeof(baTemp));		

    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
    return(result);
}


void vdPrintCenter(unsigned char *strIn)
{
	unsigned char tucPrint [24*4+1];
	short i,spacestring;
    USHORT usCharPerLine = 32;
    BYTE baTemp[PAPER_X_SIZE * 64];

    if(d_FONT_24x24 == stgFONT_ATTRIB.FontSize && NORMAL_SIZE == stgFONT_ATTRIB.X_Zoom)
        usCharPerLine = 32;
    else if(d_FONT_24x24 == stgFONT_ATTRIB.FontSize && DOUBLE_SIZE == stgFONT_ATTRIB.X_Zoom)
        usCharPerLine = 16;
    else if(d_FONT_16x16 == stgFONT_ATTRIB.FontSize && NORMAL_SIZE == stgFONT_ATTRIB.X_Zoom)
        usCharPerLine = 48;
    else if(d_FONT_16x16 == stgFONT_ATTRIB.FontSize && DOUBLE_SIZE == stgFONT_ATTRIB.X_Zoom)
        usCharPerLine = 24;
    else
        usCharPerLine = 32;
        
    i = strlen(strIn);
	spacestring=(usCharPerLine-i)/2;
				
	memset(tucPrint,0x20,55);
	memcpy(tucPrint+spacestring,strIn,usCharPerLine);	
	
	tucPrint[i+spacestring]=0;
    memset (baTemp, 0x00, sizeof(baTemp));
      
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, tucPrint, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
}

void vdPrintTitleCenter(unsigned char *strIn)
{
	unsigned char tucPrint [24*4+1];
	short i,spacestring;
    USHORT usCharPerLine = 16;
    BYTE baTemp[PAPER_X_SIZE * 64];

    vdSetGolbFontAttrib(d_FONT_24x24, DOUBLE_SIZE, NORMAL_SIZE, 0, 0);
    
    i = strlen(strIn);
	spacestring=(usCharPerLine-i)/2;
				
	memset(tucPrint,0x20,30);
	
	memcpy(tucPrint+spacestring,strIn,usCharPerLine);	
	
	tucPrint[i+spacestring]=0;
        
    memset (baTemp, 0x00, sizeof(baTemp));	
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, tucPrint, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

    vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
    
}

USHORT printDividingLine(int style)
{
    if (style == DIVIDING_LINE_DOUBLE)
        return(CTOS_PrinterPutString("==========================================="));
    else
        return(CTOS_PrinterPutString("-------------------------------------------"));
}

void vdCTOSS_GetEMVTagsDescription(USHORT usTag, char *szValue)
{
    switch(usTag)
    {
        case TAG_50:
            strcpy(szValue, "Appl Label");
            break;

        case TAG_57:
            strcpy(szValue, "Track2 Data");
            break;

        case TAG_5F2A_TRANS_CURRENCY_CODE:
            strcpy(szValue, "Txn CurrCode");
            break;

        case TAG_5F34_PAN_IDENTFY_NO:
            strcpy(szValue, "PAN Seq Num");
            break;

        case TAG_82_AIP:
            strcpy(szValue, "AIP");
            break;

        case TAG_8A_AUTH_CODE:
            strcpy(szValue, "Auth Code");
            break;

        case TAG_8F:
            strcpy(szValue, "CAPK Index");
            break;

        case TAG_91_ARPC:
            strcpy(szValue, "ARPC");
            break;

        case TAG_95:
            strcpy(szValue, "TVR");
            break;

        case TAG_9A_TRANS_DATE:
            strcpy(szValue, "Txn Date");
            break;

        case TAG_9B:
            strcpy(szValue, "TSI");
            break;

        case TAG_9C_TRANS_TYPE:
            strcpy(szValue, "Txn Type");
            break;

        case TAG_9F02_AUTH_AMOUNT:
            strcpy(szValue, "Txn Amt");
            break;

        case TAG_9F03_OTHER_AMOUNT:
            strcpy(szValue, "Other Amt");
            break;

        case TAG_9F10_IAP:
            strcpy(szValue, "IAP");
            break;

        case TAG_9F12:
            strcpy(szValue, "Appl Pref Name");
            break;

        case TAG_9F1A_TERM_COUNTRY_CODE:
            strcpy(szValue, "Term CurrCode");
            break;

        case TAG_9F1B_TERM_FLOOR_LIMIT:
            strcpy(szValue, "FloorLimit");
            break;

        case TAG_9F26_EMV_AC:
            strcpy(szValue, "AC");
            break;

        case TAG_9F27:
            strcpy(szValue, "CID");
            break;

        case TAG_9F33_TERM_CAB:
            strcpy(szValue, "Term Cab");
            break;

        case TAG_9F34_CVM:
            strcpy(szValue, "CVM");
            break;

        case TAG_9F36_ATC:
            strcpy(szValue, "ATC");
            break;

        case TAG_9F37_UNPREDICT_NUM:
            strcpy(szValue, "Unpredict Num");
            break;

        case TAG_9F5B:
            strcpy(szValue, "Script Result");
            break;

        case TAG_71:
            strcpy(szValue, "Issuer Script1");
            break;

        case TAG_72:
            strcpy(szValue, "Issuer Script2");
            break;

        default :
            szValue[0] = 0x00;
            break;
    }
}

void vdPrintEMVTags(void)
{
    BYTE   EMVtagVal[64];
    USHORT EMVtagLen;
    USHORT usPrintTag;
    USHORT usPrintTagLen;
    USHORT usOffset;
    char szStr[d_LINE_SIZE + 1];
    char szTagDesp[50];
    char szEMVTagList[512];
    char szEMVTagListHex[256];
    BYTE szOutEMVData[2048];
    USHORT inTagLen = 0;
    
    CTOS_PrinterSetHeatLevel(4);
    if( printCheckPaper()==-1)
    	return ;
    CTOS_LanguagePrinterFontSize(d_FONT_16x16, 0, TRUE);	
    vdPrintTitleCenter("EMV TAGS DATA");

    memset(szOutEMVData,0x00,sizeof(szOutEMVData));

    usCTOSS_EMV_MultiDataGet(PRINT_EMV_TAGS_LIST, &inTagLen, szOutEMVData);
    DebugAddHEX("PRINT_EMV_TAGS_LIST",szOutEMVData,inTagLen);

    memset(szEMVTagList,0x00,sizeof(szEMVTagList));
    memset(szEMVTagListHex,0x00,sizeof(szEMVTagListHex));
    strcpy(szEMVTagList, PRINT_EMV_TAGS_LIST);
    wub_str_2_hex(szEMVTagList, szEMVTagListHex, strlen(szEMVTagList));

    usOffset = 0;
    while(szEMVTagListHex[usOffset] != 0x00)
    {
        CTOS_PrinterFline(d_LINE_DOT * 1);
        
        memset(szStr, 0x00, sizeof(szStr));
        if ((szEMVTagListHex[usOffset] & 0x1F) == 0x1F)	// If the least 5 bits of the first byte are set, it is a two byte Tag
    	{
    		usPrintTag = szEMVTagListHex[usOffset];
    		usPrintTag = ((usPrintTag << 8) | szEMVTagListHex[usOffset+1]);
    		usPrintTagLen = 2;		
    	}
    	else
    	{
    		usPrintTag = szEMVTagListHex[usOffset];
            usPrintTag = usPrintTag & 0x00FF;
            usPrintTagLen = 1;
    	}
        memcpy(szStr, &szEMVTagList[usOffset*2], usPrintTagLen*2);
        usOffset += usPrintTagLen;

        memset(szTagDesp,0x00,sizeof(szTagDesp));
        vdCTOSS_GetEMVTagsDescription(usPrintTag, szTagDesp);
        vdDebug_LogPrintf("szStr[%s] usPrintTag[%X] szTagDesp[%s]", szStr, usPrintTag, szTagDesp);  
        vdMyEZLib_Printf("%s (%s)", szStr,szTagDesp);
        memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
        EMVtagLen = 0;
        usCTOSS_FindTagFromDataPackage(usPrintTag, EMVtagVal, &EMVtagLen, szOutEMVData, inTagLen);
        memset(szStr, ' ', d_LINE_SIZE);
        if(EMVtagLen == 0)
            memcpy(szStr,"No DATA" , 7);
        else    
            wub_hex_2_str(EMVtagVal, szStr, EMVtagLen);
        vdMyEZLib_Printf("Len:%d val:%s", EMVtagLen, szStr);
    }
        
    CTOS_PrinterFline(d_LINE_DOT * 1);
    vdPrintTitleCenter("*** END OF REPORT ***");
    CTOS_PrinterFline(d_LINE_DOT * 10); 
  
}

void vdPrintTerminalConfig(void)
{
    int inResult;
    int shHostIndex = 1;
    int inNum = 0;
    int inNumOfHost = 0;
    int inNumOfMerchant = 0;
    int inLoop =0 ;
    BYTE szStr[50];
    BYTE szBuf[50];
    BYTE baTemp[PAPER_X_SIZE * 64];

    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
    vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
    
    CTOS_PrinterSetHeatLevel(4);  

	ushCTOS_PrintHeader(0);

    CTOS_PrinterFline(d_LINE_DOT * 1);
            
    memset(szStr, 0x00, sizeof(szStr));
    memset(szBuf, 0x00, sizeof(szBuf));
    wub_hex_2_str(strTCT.szInvoiceNo, szBuf, 3);
    sprintf(szStr, "INVOICE NO: %s", szBuf);                        
    memset (baTemp, 0x00, sizeof(baTemp));
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

    memset(szStr, 0x00, sizeof(szStr));
    sprintf(szStr, "PABX: %s", strTCT.szPabx);                        
    memset (baTemp, 0x00, sizeof(baTemp));
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

    memset(szStr, 0x00, sizeof(szStr));
    if(strTCT.fTipAllowFlag)
        sprintf(szStr, "TIP ALLOWED: %s", "YES");      
    else
        sprintf(szStr, "TIP ALLOWED: %s", "NO");
    memset (baTemp, 0x00, sizeof(baTemp));
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
    
    //check host num
    inNumOfHost = inHDTNumRecord();
    
    vdDebug_LogPrintf("[inNumOfHost]-[%d]", inNumOfHost);
    for(inNum =1 ;inNum <= inNumOfHost; inNum++)
    {
        if(inHDTRead(inNum) == d_OK)
        {                
            inCPTRead(inNum);

            CTOS_PrinterFline(d_LINE_DOT * 1);
            
            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "HOST: %s", strHDT.szHostLabel);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

            memset(szStr, 0x00, sizeof(szStr));
            memset(szBuf, 0x00, sizeof(szBuf));
            wub_hex_2_str(strHDT.szTPDU, szBuf, 5);
            sprintf(szStr, "TPDU: %s", szBuf);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

            memset(szStr, 0x00, sizeof(szStr));
            if(strCPT.inCommunicationMode == ETHERNET_MODE)
            {   
                sprintf(szStr, "COMM TYPE: %s", "ETHERNET");           
            }
            else if(strCPT.inCommunicationMode == DIAL_UP_MODE)
            {
                sprintf(szStr, "COMM TYPE: %s", "DIAL_UP");         
            }       
            else if(strCPT.inCommunicationMode == GPRS_MODE)
            {
                sprintf(szStr, "COMM TYPE: %s", "GPRS");                 
            }
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "PRI NUM : %s", strCPT.szPriTxnPhoneNumber);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "SEC NUM : %s", strCPT.szSecTxnPhoneNumber);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "PRI IP  : %s", strCPT.szPriTxnHostIP);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "PRI PORT: %d", strCPT.inPriTxnHostPortNum);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "SEC IP  : %s", strCPT.szSecTxnHostIP);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

            memset(szStr, 0x00, sizeof(szStr));
            sprintf(szStr, "SEC PORT: %d", strCPT.inSecTxnHostPortNum);                        
            memset (baTemp, 0x00, sizeof(baTemp));
            CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
            CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

            inMMTReadNumofRecords(strHDT.inHostIndex,&inNumOfMerchant);
        
            vdDebug_LogPrintf("[inNumOfMerchant]-[%d]strHDT.inHostIndex[%d]", inNumOfMerchant,strHDT.inHostIndex);
            for(inLoop=1; inLoop <= inNumOfMerchant;inLoop++)
            {
                if((inResult = inMMTReadRecord(strHDT.inHostIndex,inLoop)) !=d_OK)
                {
                    vdDebug_LogPrintf("[read MMT fail]-Mitid[%d]strHDT.inHostIndex[%d]inResult[%d]", inLoop,strHDT.inHostIndex,inResult);
                    continue;
                    //break;
                }
                else 
                {
                    if(strMMT[0].fMMTEnable)
                    {                        
                        memset(szStr, 0x00, sizeof(szStr));
                        sprintf(szStr, "MERCHANT:%s", strMMT[0].szMerchantName);                        
                        memset (baTemp, 0x00, sizeof(baTemp));
                        CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
                        CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

                        memset(szStr, 0x00, sizeof(szStr));
                        sprintf(szStr, "TID : %s", strMMT[0].szTID);                        
                        memset (baTemp, 0x00, sizeof(baTemp));
                        CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
                        CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

                        memset(szStr, 0x00, sizeof(szStr));
                        sprintf(szStr, "MID : %s", strMMT[0].szMID);                        
                        memset (baTemp, 0x00, sizeof(baTemp));
                        CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
                        CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

                        memset(szStr, 0x00, sizeof(szStr));
                        memset(szBuf, 0x00, sizeof(szBuf));
                        wub_hex_2_str(strMMT[0].szBatchNo, szBuf, 3);
                        sprintf(szStr, "BATCH NO: %s", szBuf);                        
                        memset (baTemp, 0x00, sizeof(baTemp));
                        CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
                        CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

                    }                    

                }
            }
        }
        else
            continue;

    }

    CTOS_PrinterFline(d_LINE_DOT * 5);
    
    return ;
}

void printCardHolderName(void)
{
    USHORT shLen;
    char szStr[d_LINE_SIZE + 1];
    BYTE baTemp[PAPER_X_SIZE * 64];
    
    shLen = strlen(srTransRec.szCardholderName);

    if(shLen > 0)
    {
        memset(szStr, 0x00, d_LINE_SIZE);
        strcpy(szStr, srTransRec.szCardholderName);

        while(0x20 == szStr[--shLen] && shLen >= 0)
            szStr[shLen] = 0x00;

    	//vdPrintCenter(szStr);	
    	
		memset (baTemp, 0x00, sizeof(baTemp));  
		CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
		CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
    }
}

USHORT ushCTOS_PrintDemo(void)
{
    BYTE strIn[40];
    unsigned char tucPrint [24*4+1];
    short i,spacestring;
    USHORT usCharPerLine = 16;
    BYTE baTemp[PAPER_X_SIZE * 64];

    vdSetGolbFontAttrib(d_FONT_24x24, DOUBLE_SIZE, NORMAL_SIZE, 0, 0);

    memset(strIn, 0x00, sizeof(strIn));
    strcpy(strIn, "DEMO");
    i = strlen(strIn);
    spacestring=(usCharPerLine-i)/2;
                
    memset(tucPrint,0x20,30);
    
    memcpy(tucPrint+spacestring,strIn,usCharPerLine);   
    
    tucPrint[i+spacestring]=0;

    CTOS_PrinterFline(d_LINE_DOT * 1);
        
    memset (baTemp, 0x00, sizeof(baTemp));  
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, tucPrint, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

    CTOS_PrinterFline(d_LINE_DOT * 1);

    vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);

    return d_OK;
    
}



USHORT ushCTOS_PrintHeader(int page)
{	
    
	//print Logo	
	vdCTOSS_PrinterBMPPic(0, 0, "logo.bmp");

	if(fRePrintFlag == TRUE)
    {   
        vdDebug_LogPrintf("srTransRec.HDTid[%d] srTransRec.MITid[%d]",srTransRec.HDTid, srTransRec.MITid);
		if ( inMMTReadRecord(srTransRec.HDTid,srTransRec.MITid) != d_OK)
        {
            vdSetErrorMessage("LOAD MMT ERR");
            return(d_NO);
        }
        vdDebug_LogPrintf("srTransRec.HDTid[%d] srTransRec.MITid[%d] strMMT[0].szRctHdr1[%s]",srTransRec.HDTid, srTransRec.MITid, strMMT[0].szRctHdr1);
    }
    
	//merhcant name and address
	if(strlen(strMMT[0].szRctHdr1) > 0)
		vdPrintCenter(strMMT[0].szRctHdr1);
	if(strlen(strMMT[0].szRctHdr2) > 0)
		vdPrintCenter(strMMT[0].szRctHdr2);
	if(strlen(strMMT[0].szRctHdr3) > 0)
    	vdPrintCenter(strMMT[0].szRctHdr3);
	if(strlen(strMMT[0].szRctHdr4) > 0)
    	vdPrintCenter(strMMT[0].szRctHdr4);
	if(strlen(strMMT[0].szRctHdr5) > 0)
    	vdPrintCenter(strMMT[0].szRctHdr5);

    if(VS_TRUE == strTCT.fDemo)
    {
        ushCTOS_PrintDemo();
    }

    if(fRePrintFlag == TRUE)
    {
        vdSetGolbFontAttrib(d_FONT_24x24, DOUBLE_SIZE, NORMAL_SIZE, 0, 0);
        vdPrintCenter("DUPLICATE");
        vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
    }
    
    
	return d_OK;
	
}

USHORT ushCTOS_PrintBody(int page)
{	
    char szStr[d_LINE_SIZE + 1];
    char szTemp[d_LINE_SIZE + 1];
    char szTemp1[d_LINE_SIZE + 1];
    char szTemp3[d_LINE_SIZE + 1];
    char szTemp4[d_LINE_SIZE + 1];
    char szTemp5[d_LINE_SIZE + 1];
    char szFormatPAN[strlen(srTransRec.szPAN) + 7];//to account for space as in PAN format and to include additional PAN no. 7 has been added -Meena 08/01/2012
    int inFmtPANSize;
    BYTE baTemp[PAPER_X_SIZE * 64];
    USHORT result;
    int num,i,inResult;
    unsigned char tucPrint [24*4+1];	
    BYTE   EMVtagVal[64];
    USHORT EMVtagLen; 
    short spacestring;
    BYTE   key;

	char szAmountBuff[20], szTemp6[47];
	int inPADSize,x;
	char szSPACE[40];


	if(d_FIRST_PAGE == page)
	{
        vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
        printTIDMID(); 

        //card type
		memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
		EMVtagLen = 0;
		memset(szStr, ' ', d_LINE_SIZE);
		vdMyEZLib_LogPrintf("CDT index: %d",srTransRec.CDTid);

		sprintf(szStr, "CARD TYPE %s", srTransRec.szCardLable);
		vdMyEZLib_LogPrintf("Card label: %s",srTransRec.szCardLable);

		memset (baTemp, 0x00, sizeof(baTemp));
		CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
		CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 


		szGetTransTitle(srTransRec.byTransType, szStr);     

		//pan
		vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
		memset(szTemp5, 0x00, sizeof(szTemp5));

		//BDO: Enable PAN Masking for each receipt - start -- jzg
#if 0
		strcpy(szTemp5, srTransRec.szPAN);
		cardMasking(szTemp5, PRINT_CARD_MASKING_3);
#else
		vdCTOS_FormatPAN(strIIT.szMaskBankCopy, srTransRec.szPAN, szTemp5);
#endif
		//BDO: Enable PAN Masking for each receipt - end -- jzg

		memset(szTemp4, 0x00, sizeof(szTemp4));
		strcpy(szTemp4, szTemp5);
		memset (baTemp, 0x00, sizeof(baTemp));
		CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szTemp4, &stgFONT_ATTRIB);
		CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);		

        //card holder name
        vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
		printCardHolderName();

		//Trans type
        vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
		
        if (srTransRec.byEntryMode == CARD_ENTRY_WAVE)
			vdPrintCenter(szStr);
		else{
			memset (baTemp, 0x00, sizeof(baTemp));
			CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
			CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
		}

        vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
        
		printBatchInvoiceNO();

		printDateTime();

		//Reference num
		memset(szStr, ' ', d_LINE_SIZE);
		memset (baTemp, 0x00, sizeof(baTemp));					
		memset(szStr, ' ', d_LINE_SIZE);
		sprintf(szStr, "REF. NO. %s        APPR. CODE %s", srTransRec.szRRN,srTransRec.szAuthCode);
		memset (baTemp, 0x00, sizeof(baTemp));		
		CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
		CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

		
//gcitra
		if (srTransRec.byTransType == RELOAD){
			memset(szStr, ' ', d_LINE_SIZE);
			memset (baTemp, 0x00, sizeof(baTemp));					
			memset(szStr, ' ', d_LINE_SIZE);
			sprintf(szStr, "DEST. CARD : %s", srTransRec.szDestCardNo);
			memset (baTemp, 0x00, sizeof(baTemp));		
			CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
			CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
		}
//gcitra

		
		
		memset(szStr, ' ', d_LINE_SIZE);
		memset(szTemp, ' ', d_LINE_SIZE);
		memset(szTemp1, ' ', d_LINE_SIZE);
		memset(szTemp3, ' ', d_LINE_SIZE);
		wub_hex_2_str(srTransRec.szTotalAmount, szTemp, AMT_BCD_SIZE);
		wub_hex_2_str(srTransRec.szBaseAmount, szTemp1, AMT_BCD_SIZE);

        vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
		if ((srTransRec.byTransType == SALE) || (srTransRec.byTransType == SALE_OFFLINE))
		{
			//Base amount
			memset(szStr, ' ', d_LINE_SIZE);
			memset(szAmountBuff,0x00,20);
			memset(szTemp4, 0x00, sizeof(szTemp4));
			memset(szTemp6,0x00, sizeof(szTemp6));
			strcpy(szTemp6,"AMOUNT:");
			
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTemp4);
			
			sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
			inPrintLeftRight(szTemp6,szAmountBuff,23);
			
		}
		else if (srTransRec.byTransType == SALE_TIP)
		{

			//Base amount
			memset(szStr, 0x00, d_LINE_SIZE);
			memset(szAmountBuff,0x00,20);
			memset(szTemp4, 0x00, sizeof(szTemp4));
			memset(szTemp6,0x00, sizeof(szTemp6));
			strcpy(szTemp6,"BASE:");	
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp4);
			sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
			inPrintLeftRight(szTemp6,szAmountBuff,23);
            /*********************************************************/
            /*TIP*/
			memset(szStr, 0x00, d_LINE_SIZE);
			memset(szAmountBuff,0x00,20);
			memset(szTemp4, 0x00, sizeof(szTemp4));
			memset(szTemp6,0x00, sizeof(szTemp6));
			strcpy(szTemp6,"TIP:");
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp3,szTemp4);
			sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
			inPrintLeftRight(szTemp6,szAmountBuff,23); 
	 		/*********************************************************/
			memset(szStr, 0x00, d_LINE_SIZE);
			memset(szAmountBuff,0x00,20);
			memset(szTemp4, 0x00, sizeof(szTemp4));
			memset(szTemp6,0x00, sizeof(szTemp6));
			strcpy(szTemp6,"TOTAL:");
			
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTemp4);
			sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
			inPrintLeftRight(szTemp6,szAmountBuff,23); 
		
		}
		else
		{
			memset(szStr, ' ', d_LINE_SIZE);
			memset(szAmountBuff,0x00,20);
			memset(szTemp4, 0x00, sizeof(szTemp4));
			memset(szTemp6,0x00, sizeof(szTemp6));
			strcpy(szTemp6,"TOTAL");
			
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp4);
			if (srTransRec.byTransType == VOID)
				sprintf(szAmountBuff,"-%s%s",strCST.szCurSymbol,szTemp4);
			else
				sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
			inPrintLeftRight(szTemp6,szAmountBuff,23); 
			
		}

        vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
		
		
	}
	else if(d_SECOND_PAGE == page)
	{
				vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
				printTIDMID(); 
		
				//card type
				memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
				EMVtagLen = 0;
				memset(szStr, ' ', d_LINE_SIZE);
				vdMyEZLib_LogPrintf("CDT index: %d",srTransRec.CDTid);
		
				sprintf(szStr, "CARD TYPE %s", srTransRec.szCardLable);
				vdMyEZLib_LogPrintf("Card label: %s",srTransRec.szCardLable);
		
				memset (baTemp, 0x00, sizeof(baTemp));
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
		
		
				szGetTransTitle(srTransRec.byTransType, szStr); 	
		
				//pan
				vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
				memset(szTemp5, 0x00, sizeof(szTemp5));
		
				//BDO: Enable PAN Masking for each receipt - start -- jzg
#if 0
				strcpy(szTemp5, srTransRec.szPAN);
				cardMasking(szTemp5, PRINT_CARD_MASKING_3);
#else
				vdCTOS_FormatPAN(strIIT.szMaskCustomerCopy, srTransRec.szPAN, szTemp5);
#endif
				//BDO: Enable PAN Masking for each receipt - end -- jzg
		
				memset(szTemp4, 0x00, sizeof(szTemp4));
				strcpy(szTemp4, szTemp5);
				memset (baTemp, 0x00, sizeof(baTemp));
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szTemp4, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);		
		
				//card holder name
				vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
				printCardHolderName();
		
				//Trans type
				vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
				
				if (srTransRec.byEntryMode == CARD_ENTRY_WAVE)
					vdPrintCenter(szStr);
				else{
					memset (baTemp, 0x00, sizeof(baTemp));
					CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
					CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				}
		
				vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
				
				printBatchInvoiceNO();
		
				printDateTime();
		
				//Reference num
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));					
				memset(szStr, ' ', d_LINE_SIZE);
				sprintf(szStr, "REF. NO. %s        APPR. CODE %s", srTransRec.szRRN,srTransRec.szAuthCode);
				memset (baTemp, 0x00, sizeof(baTemp));		
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
		
				
		//gcitra
				if (srTransRec.byTransType == RELOAD){
					memset(szStr, ' ', d_LINE_SIZE);
					memset (baTemp, 0x00, sizeof(baTemp));					
					memset(szStr, ' ', d_LINE_SIZE);
					sprintf(szStr, "DEST. CARD : %s", srTransRec.szDestCardNo);
					memset (baTemp, 0x00, sizeof(baTemp));		
					CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
					CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				}
		//gcitra
		
				
				
				memset(szStr, ' ', d_LINE_SIZE);
				memset(szTemp, ' ', d_LINE_SIZE);
				memset(szTemp1, ' ', d_LINE_SIZE);
				memset(szTemp3, ' ', d_LINE_SIZE);
				wub_hex_2_str(srTransRec.szTotalAmount, szTemp, AMT_BCD_SIZE);
				wub_hex_2_str(srTransRec.szBaseAmount, szTemp1, AMT_BCD_SIZE);
		
				vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
				if ((srTransRec.byTransType == SALE) || (srTransRec.byTransType == SALE_OFFLINE))
				{
					//Base amount
					memset(szStr, ' ', d_LINE_SIZE);
					memset(szAmountBuff,0x00,20);
					memset(szTemp4, 0x00, sizeof(szTemp4));
					memset(szTemp6,0x00, sizeof(szTemp6));
					strcpy(szTemp6,"AMOUNT:");
					
					vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTemp4);
					
					sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
					inPrintLeftRight(szTemp6,szAmountBuff,23);
						
					}
					else if (srTransRec.byTransType == SALE_TIP)
					{
					
						//Base amount
						memset(szStr, 0x00, d_LINE_SIZE);
						memset(szAmountBuff,0x00,20);
						memset(szTemp4, 0x00, sizeof(szTemp4));
						memset(szTemp6,0x00, sizeof(szTemp6));
						strcpy(szTemp6,"BASE:");	
						vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp4);
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
						inPrintLeftRight(szTemp6,szAmountBuff,23);
						/*********************************************************/
						/*TIP*/
						memset(szStr, 0x00, d_LINE_SIZE);
						memset(szAmountBuff,0x00,20);
						memset(szTemp4, 0x00, sizeof(szTemp4));
						memset(szTemp6,0x00, sizeof(szTemp6));
						strcpy(szTemp6,"TIP:");
						vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp3,szTemp4);
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
						inPrintLeftRight(szTemp6,szAmountBuff,23); 
						/*********************************************************/
						memset(szStr, 0x00, d_LINE_SIZE);
						memset(szAmountBuff,0x00,20);
						memset(szTemp4, 0x00, sizeof(szTemp4));
						memset(szTemp6,0x00, sizeof(szTemp6));
						strcpy(szTemp6,"TOTAL:");
						
						vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTemp4);
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
						inPrintLeftRight(szTemp6,szAmountBuff,23); 
				
				}
				else
				{
					memset(szStr, ' ', d_LINE_SIZE);
					memset(szAmountBuff,0x00,20);
					memset(szTemp4, 0x00, sizeof(szTemp4));
					memset(szTemp6,0x00, sizeof(szTemp6));
					strcpy(szTemp6,"TOTAL");
					
					vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp4);
					if (srTransRec.byTransType == VOID)
						sprintf(szAmountBuff,"-%s%s",strCST.szCurSymbol,szTemp4);
					else
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
					inPrintLeftRight(szTemp6,szAmountBuff,23); 
					
				}
		
				vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
		
	}

	else if(d_THIRD_PAGE == page)
	{
				vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
				printTIDMID(); 
		
				//card type
				memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
				EMVtagLen = 0;
				memset(szStr, ' ', d_LINE_SIZE);
				vdMyEZLib_LogPrintf("CDT index: %d",srTransRec.CDTid);
		
				sprintf(szStr, "CARD TYPE %s", srTransRec.szCardLable);
				vdMyEZLib_LogPrintf("Card label: %s",srTransRec.szCardLable);
		
				memset (baTemp, 0x00, sizeof(baTemp));
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 
		
		
				szGetTransTitle(srTransRec.byTransType, szStr); 	
		
				//pan
				vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
				memset(szTemp5, 0x00, sizeof(szTemp5));
			
					//BDO: Enable PAN Masking for each receipt - start -- jzg
#if 0
					strcpy(szTemp5, srTransRec.szPAN);
					cardMasking(szTemp5, PRINT_CARD_MASKING_3);
#else
					vdCTOS_FormatPAN(strIIT.szMaskMerchantCopy, srTransRec.szPAN, szTemp5);
#endif
					//BDO: Enable PAN Masking for each receipt - end -- jzg
			
				memset(szTemp4, 0x00, sizeof(szTemp4));
				strcpy(szTemp4, szTemp5);
				memset (baTemp, 0x00, sizeof(baTemp));
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szTemp4, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);		
		
				//card holder name
				vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
				printCardHolderName();
		
				//Trans type
				vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
				
				if (srTransRec.byEntryMode == CARD_ENTRY_WAVE)
					vdPrintCenter(szStr);
				else{
					memset (baTemp, 0x00, sizeof(baTemp));
					CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
					CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				}
		
				vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
				
				printBatchInvoiceNO();
		
				printDateTime();
		
				//Reference num
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));					
				memset(szStr, ' ', d_LINE_SIZE);
				sprintf(szStr, "REF. NO. %s        APPR. CODE %s", srTransRec.szRRN,srTransRec.szAuthCode);
				
				memset (baTemp, 0x00, sizeof(baTemp));		
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
		
				
		//gcitra
				if (srTransRec.byTransType == RELOAD){
					memset(szStr, ' ', d_LINE_SIZE);
					memset (baTemp, 0x00, sizeof(baTemp));					
					memset(szStr, ' ', d_LINE_SIZE);
					sprintf(szStr, "DEST. CARD : %s", srTransRec.szDestCardNo);
					memset (baTemp, 0x00, sizeof(baTemp));		
					CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
					CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				}
		//gcitra
		
				
				
				memset(szStr, ' ', d_LINE_SIZE);
				memset(szTemp, ' ', d_LINE_SIZE);
				memset(szTemp1, ' ', d_LINE_SIZE);
				memset(szTemp3, ' ', d_LINE_SIZE);
				wub_hex_2_str(srTransRec.szTotalAmount, szTemp, AMT_BCD_SIZE);
				wub_hex_2_str(srTransRec.szBaseAmount, szTemp1, AMT_BCD_SIZE);
		
				vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
				if ((srTransRec.byTransType == SALE) || (srTransRec.byTransType == SALE_OFFLINE))
				{
					//Base amount
					memset(szStr, ' ', d_LINE_SIZE);
					memset(szAmountBuff,0x00,20);
					memset(szTemp4, 0x00, sizeof(szTemp4));
					memset(szTemp6,0x00, sizeof(szTemp6));
					strcpy(szTemp6,"AMOUNT:");
					
					vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTemp4);
					
					sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
					inPrintLeftRight(szTemp6,szAmountBuff,23);
						
					}
					else if (srTransRec.byTransType == SALE_TIP)
					{
					
						//Base amount
						memset(szStr, 0x00, d_LINE_SIZE);
						memset(szAmountBuff,0x00,20);
						memset(szTemp4, 0x00, sizeof(szTemp4));
						memset(szTemp6,0x00, sizeof(szTemp6));
						strcpy(szTemp6,"BASE:");	
						vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp4);
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
						inPrintLeftRight(szTemp6,szAmountBuff,23);
						/*********************************************************/
						/*TIP*/
						memset(szStr, 0x00, d_LINE_SIZE);
						memset(szAmountBuff,0x00,20);
						memset(szTemp4, 0x00, sizeof(szTemp4));
						memset(szTemp6,0x00, sizeof(szTemp6));
						strcpy(szTemp6,"TIP:");
						vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp3,szTemp4);
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
						inPrintLeftRight(szTemp6,szAmountBuff,23); 
						/*********************************************************/
						memset(szStr, 0x00, d_LINE_SIZE);
						memset(szAmountBuff,0x00,20);
						memset(szTemp4, 0x00, sizeof(szTemp4));
						memset(szTemp6,0x00, sizeof(szTemp6));
						strcpy(szTemp6,"TOTAL:");
						
						vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTemp4);
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
						inPrintLeftRight(szTemp6,szAmountBuff,23); 
				
				}
				else
				{
					memset(szStr, ' ', d_LINE_SIZE);
					memset(szAmountBuff,0x00,20);
					memset(szTemp4, 0x00, sizeof(szTemp4));
					memset(szTemp6,0x00, sizeof(szTemp6));
					strcpy(szTemp6,"TOTAL");
					
					vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp4);
					if (srTransRec.byTransType == VOID)
						sprintf(szAmountBuff,"-%s%s",strCST.szCurSymbol,szTemp4);
					else
						sprintf(szAmountBuff,"%s%s",strCST.szCurSymbol,szTemp4);
					inPrintLeftRight(szTemp6,szAmountBuff,23); 
					
				}
		
				vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
		
	}

	return d_OK;;	
	
}
USHORT ushCTOS_PrintAgreement()
{
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
	vdPrintCenter("I AGREE TO PAY THE ABOVE TOTAL AMOUNT");
	vdPrintCenter("ACCORDING TO THE CARD ISSUER AGREEMENT");
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
}

USHORT ushCTOS_PrintFooter(int page)
{		
	BYTE EMVtagVal[64] = {0};
	USHORT EMVtagLen = 0; 
    BYTE baTemp[PAPER_X_SIZE * 64];
    char szStr[d_LINE_SIZE + 3];

	if(page == d_FIRST_PAGE)
	{
		memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
		EMVtagLen = 0;

		DebugAddINT("ushCTOS_PrintFooter,mode",srTransRec.byEntryMode);  

		vdDebug_LogPrintf("CVM [%02X %02X %02X]",
			srTransRec.stEMVinfo.T9F34[0], srTransRec.stEMVinfo.T9F34[1], srTransRec.stEMVinfo.T9F34[2]);
		vdDebug_LogPrintf("srTransRec.byEntryMode = [%d]", srTransRec.byEntryMode);

		if ((srTransRec.byEntryMode == CARD_ENTRY_ICC)||(srTransRec.byEntryMode == CARD_ENTRY_WAVE))
		{
			EMVtagLen = 3;
			memcpy(EMVtagVal, srTransRec.stEMVinfo.T9F34, EMVtagLen);

			//EMV: Fix for noCVM during above floor limit scenario - start -- jzg
			vdDebug_LogPrintf("EMVtagVal [%02X %02X %02X]", EMVtagVal[0], EMVtagVal[1], EMVtagVal[2]);
			
			if (((EMVtagVal[0] != 0x03) && (EMVtagVal[0] != 0x05) &&
				(EMVtagVal[0] != 0x1E)) || (EMVtagVal[0] == 0x3F))
			//EMV: Fix for noCVM during above floor limit scenario - end -- jzg
			{
				CTOS_PrinterFline(d_LINE_DOT * 1);
				CTOS_PrinterPutString("*****NO SIGNATURE REQUIRED*****");
				if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
					CTOS_PrinterPutString("     (PIN VERIFY SUCCESS)");
			}
			else
			{
				CTOS_PrinterFline(d_LINE_DOT );
			}
		}
		else
		{
			CTOS_PrinterFline(d_LINE_DOT );
		}

		vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

		//CTOS_PrinterPutString("SIGN:_______________________");
		
		//printCardHolderName();

		
		CTOS_PrinterFline(d_LINE_DOT * 1);

		//ushCTOS_PrintAgreement();

		if(strlen(strMMT[0].szRctFoot1) > 0)
			vdPrintCenter(strMMT[0].szRctFoot1);
		if(strlen(strMMT[0].szRctFoot2) > 0)
			vdPrintCenter(strMMT[0].szRctFoot2);
		if(strlen(strMMT[0].szRctFoot3) > 0)
			vdPrintCenter(strMMT[0].szRctFoot3);

		CTOS_PrinterFline(d_LINE_DOT * 1); 
		//CTOS_PrinterPutString("   ***** BANK COPY *****  ");
		
		vdPrintCenter("   ***** BANK COPY *****  ");
	}
//1027
	else if(page == d_SECOND_PAGE)
	{
			memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
			EMVtagLen = 0;
		
			DebugAddINT("ushCTOS_PrintFooter,mode",srTransRec.byEntryMode);  
		
			vdDebug_LogPrintf("CVM [%02X %02X %02X]",
				srTransRec.stEMVinfo.T9F34[0], srTransRec.stEMVinfo.T9F34[1], srTransRec.stEMVinfo.T9F34[2]);
			vdDebug_LogPrintf("srTransRec.byEntryMode = [%d]", srTransRec.byEntryMode);
		
		if ((srTransRec.byEntryMode == CARD_ENTRY_ICC)||(srTransRec.byEntryMode == CARD_ENTRY_WAVE))
		{
			EMVtagLen = 3;
			memcpy(EMVtagVal, srTransRec.stEMVinfo.T9F34, EMVtagLen);

			//EMV: Fix for noCVM during above floor limit scenario - start -- jzg
			vdDebug_LogPrintf("EMVtagVal [%02X %02X %02X]", EMVtagVal[0], EMVtagVal[1], EMVtagVal[2]);
			
			if (((EMVtagVal[0] != 0x03) && (EMVtagVal[0] != 0x05) &&
				(EMVtagVal[0] != 0x1E)) || (EMVtagVal[0] == 0x3F))
			//EMV: Fix for noCVM during above floor limit scenario - end -- jzg
			{
				CTOS_PrinterFline(d_LINE_DOT * 1);
				CTOS_PrinterPutString("*****NO SIGNATURE REQUIRED*****");
				if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
					CTOS_PrinterPutString("     (PIN VERIFY SUCCESS)");
			}
			else
			{
				CTOS_PrinterFline(d_LINE_DOT );
			}
		}
		else
		{
			CTOS_PrinterFline(d_LINE_DOT );
		}
		
			vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
		
			//CTOS_PrinterPutString("SIGN:________________________________________");
			//printCardHolderName();
		
			
			CTOS_PrinterFline(d_LINE_DOT * 1);
		
			//ushCTOS_PrintAgreement();
		
			if(strlen(strMMT[0].szRctFoot1) > 0)
				vdPrintCenter(strMMT[0].szRctFoot1);
			if(strlen(strMMT[0].szRctFoot2) > 0)
				vdPrintCenter(strMMT[0].szRctFoot2);
			if(strlen(strMMT[0].szRctFoot3) > 0)
				vdPrintCenter(strMMT[0].szRctFoot3);
		
			CTOS_PrinterFline(d_LINE_DOT * 1); 
			//CTOS_PrinterPutString("	***** BANK COPY *****  ");
			
			vdPrintCenter("   *****CUSTOMER COPY *****  ");
		}


//1027
	else if(page == d_THIRD_PAGE)
	{
			memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
			EMVtagLen = 0;
		
			DebugAddINT("ushCTOS_PrintFooter,mode",srTransRec.byEntryMode);  
		
			vdDebug_LogPrintf("CVM [%02X %02X %02X]",
				srTransRec.stEMVinfo.T9F34[0], srTransRec.stEMVinfo.T9F34[1], srTransRec.stEMVinfo.T9F34[2]);
			vdDebug_LogPrintf("srTransRec.byEntryMode = [%d]", srTransRec.byEntryMode);
		
		if ((srTransRec.byEntryMode == CARD_ENTRY_ICC)||(srTransRec.byEntryMode == CARD_ENTRY_WAVE))
		{
			EMVtagLen = 3;
			memcpy(EMVtagVal, srTransRec.stEMVinfo.T9F34, EMVtagLen);

			//EMV: Fix for noCVM during above floor limit scenario - start -- jzg
			vdDebug_LogPrintf("EMVtagVal [%02X %02X %02X]", EMVtagVal[0], EMVtagVal[1], EMVtagVal[2]);
			
			if (((EMVtagVal[0] != 0x03) && (EMVtagVal[0] != 0x05) &&
				(EMVtagVal[0] != 0x1E)) || (EMVtagVal[0] == 0x3F))
			//EMV: Fix for noCVM during above floor limit scenario - end -- jzg
			{
				CTOS_PrinterFline(d_LINE_DOT * 1);
				CTOS_PrinterPutString("*****NO SIGNATURE REQUIRED*****");
				if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
					CTOS_PrinterPutString("     (PIN VERIFY SUCCESS)");
			}
			else
			{
				CTOS_PrinterFline(d_LINE_DOT );
			}
		}
		else
		{
			CTOS_PrinterFline(d_LINE_DOT );
		}
		
			vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
		
			//printCardHolderName();
		
			
			CTOS_PrinterFline(d_LINE_DOT * 1);
		
			//ushCTOS_PrintAgreement();
		
			if(strlen(strMMT[0].szRctFoot1) > 0)
				vdPrintCenter(strMMT[0].szRctFoot1);
			if(strlen(strMMT[0].szRctFoot2) > 0)
				vdPrintCenter(strMMT[0].szRctFoot2);
			if(strlen(strMMT[0].szRctFoot3) > 0)
				vdPrintCenter(strMMT[0].szRctFoot3);
		
			CTOS_PrinterFline(d_LINE_DOT * 1); 
			//CTOS_PrinterPutString("	***** BANK COPY *****  ");
			
			vdPrintCenter("   ***** MERCHANT COPY *****  ");
		}

	/***************************************************/
	//sidumili: Issue#000135 [Print Footer Logo]
	if (srTransRec.fFooterLogo){
	CTOS_PrinterFline(d_LINE_DOT * 2); 
	vdCTOSS_PrintFooterLogoBMPPic(0, 0, "footer.bmp");
	}
	/***************************************************/
	
	CTOS_PrinterFline(d_LINE_DOT * 6); 

	return d_OK;	
}



USHORT ushCTOS_printAll(int page)
{	
	int inResult;

	//sidumili: check printer status
	if( printCheckPaper()==-1)
	return -1;

    vdSetPrintThreadStatus(1);

    if(VS_FALSE == fRePrintFlag)
	    memcpy(strTCT.szLastInvoiceNo,srTransRec.szInvoiceNo,INVOICE_BCD_SIZE);
	
	if((inResult = inTCTSave(1)) != ST_SUCCESS)
    {
		vdDisplayErrorMsg(1, 8, "Update TCT fail");
    }
	
    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
	
    CTOS_PrinterSetHeatLevel(4);  

	//gcitra
	if (srTransRec.byTransType == CASH_LOYALTY)
  		ushCTOS_PrintCashLoyaltyBody();	
	else{
	//gcitra
	ushCTOS_PrintHeader(page);
  	ushCTOS_PrintBody(page);	
	ushCTOS_PrintFooter(page);
	}
    vdSetPrintThreadStatus(0);
    CTOS_LCDTClearDisplay();  
    
    return d_OK;
 
}

int inCTOS_rePrintReceipt(void)
{
	int   inResult;
	BYTE  szInvNoAsc[6+1];
	BYTE  szInvNoBcd[3];	
	BOOL   needSecond = TRUE;	
	//1027
	BOOL   needThird = TRUE;	
	BYTE   key;

	/*BDO: Parameterized receipt printing - start*/
	BOOL BankCopy, CustCopy, MercCopy;
	BOOL fFirstReceiptPrinted = VS_FALSE;
	/*BDO: Parameterized receipt printing - end*/
	
	CTOS_PrinterSetHeatLevel(strTCT.inPrinterHeatLevel);
	if( printCheckPaper()==-1)
		return d_NO;
	
	inResult = inCTOS_GeneralGetInvoice();
	if(d_OK != inResult)
	{
		return inResult;
	}

	if (inMultiAP_CheckMainAPStatus() == d_OK)
	{
		inResult = inCTOS_MultiAPBatchSearch(d_IPC_CMD_REPRINT_ANY);
		if(d_OK != inResult)
			return inResult;
	}
	else
	{
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		{
			inResult = inCTOS_MultiAPGetVoid();
			if(d_OK != inResult)
				return inResult;
		}		
		inResult = inCTOS_BatchSearch();
		if(d_OK != inResult)
			return inResult;
	}

	if(d_OK != inResult)
	{
		return inResult;
	}

	/*BDO: Parameterized receipt printing - start*/
	inHDTRead(srTransRec.HDTid);

	if (srTransRec.byTransType == VOID){
		BankCopy = strHDT.fPrintVoidBankReceipt;
		CustCopy = strHDT.fPrintVoidCustReceipt;
		MercCopy = strHDT.fPrintVoidMercReceipt;
	}else{
		BankCopy = strHDT.fPrintBankReceipt;
		CustCopy = strHDT.fPrintCustReceipt;
		MercCopy = strHDT.fPrintMercReceipt;
	}

	//remove later
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::srTransRec.HDTid = [%d]", srTransRec.HDTid);
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::BankCopy = [%d]", BankCopy);
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::CustCopy = [%d]", CustCopy);
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::MercCopy = [%d]", MercCopy);
	/*BDO: Parameterized receipt printing - end*/

	
	//1026
	inCSTRead(srTransRec.HDTid); // sidumili: commented
	//1026

	//BDO: Reload IIT to properly load PAN masking during reprint - start -- jzg
	vdDebug_LogPrintf("JEFF::IITid [%d]", srTransRec.IITid);
	inIITRead(srTransRec.IITid);
	//BDO: Reload IIT to properly load PAN masking during reprint - end -- jzg


	/*BDO: Parameterized receipt printing - start*/
	if(BankCopy == TRUE){
		inResult = ushCTOS_printAll(d_FIRST_PAGE);
		CTOS_KBDBufFlush();//cleare key buffer
		fFirstReceiptPrinted = TRUE;
	}


    if(CustCopy == TRUE)
    {
        if (fFirstReceiptPrinted == TRUE){
        	CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
					vduiDisplayStringCenter(7,"CUSTOMER COPY");
					vduiDisplayStringCenter(8,"NO[X] YES[OK]");

        	while(1)
        	{ 
        		if (strTCT.fPrintWarningSound == TRUE) /*BDO PHASE 2: [Warning sound for printing flag] -- sidumili*/
						vduiWarningSound();
			
            CTOS_KBDHit(&key);
            if(key == d_KBD_ENTER)
            {
                break;
            }
            else if((key == d_KBD_CANCEL))
            {
                needSecond = FALSE;
                break;
            }
            if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
            {
                break;
            }		
        	}
        }


				if(needSecond){
					inResult=ushCTOS_printAll(d_SECOND_PAGE);			            
					CTOS_KBDBufFlush();				
					fFirstReceiptPrinted = TRUE;
				}
    }
		
	if(MercCopy == TRUE)
	{
		
		if (fFirstReceiptPrinted == TRUE){
			CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
			vduiDisplayStringCenter(7,"MERCHANT COPY");
			vduiDisplayStringCenter(8,"NO[X] YES[OK]");
		
			while(1)
			{ 
				if (strTCT.fPrintWarningSound == TRUE) /*BDO PHASE 2: [Warning sound for printing flag] -- sidumili*/
				vduiWarningSound();
				
				CTOS_KBDHit(&key);
				if(key == d_KBD_ENTER)
				{
					break;
				}
					else if((key == d_KBD_CANCEL))
				{
					needThird = FALSE;
					break;
				}
				if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
				{
					break;
				}		
			}
		
		}
		
		if(needThird)
		{		
			inResult=ushCTOS_printAll(d_THIRD_PAGE); 				
			CTOS_KBDBufFlush();
		}
	}
	/*BDO: Parameterized receipt printing - end*/

	return d_OK;
}

void vdCTOS_PrintSummaryReport()
{
	ACCUM_REC srAccumRec;
	unsigned char chkey;
	short shHostIndex;
	int inResult,inRet;
	int inTranCardType;
	int inReportType;
	int inIITNum , i;
	char szStr[d_LINE_SIZE + 1];
    BYTE baTemp[PAPER_X_SIZE * 64];

	int inPADSize,x;
	char szSPACE[40];
	char szBuff[46];
	char szBuff2[46];

	if( printCheckPaper()==-1)
		return;
		
	//by host and merchant
	shHostIndex = inCTOS_SelectHostSetting();
	if (shHostIndex == -1)
		return;
	strHDT.inHostIndex = shHostIndex;
    
	DebugAddINT("summary host Index",shHostIndex);
	inCSTRead(strHDT.inCurrencyIdx);

	if (inMultiAP_CheckMainAPStatus() == d_OK)
	{
		inRet = inCTOS_MultiAPSaveData(d_IPC_CMD_SUMMARY_REPORT);
		if(d_OK != inRet)
			return ;
	}
	else
	{
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		{
			inRet = inCTOS_MultiAPGetData();
			if(d_OK != inRet)
				return ;

			inRet = inCTOS_MultiAPReloadHost();
			if(d_OK != inRet)
				return ;
		}
	}

	inResult = inCTOS_CheckAndSelectMutipleMID();
	DebugAddINT("summary MITid",srTransRec.MITid);
	if(d_OK != inResult)
		return;

	inResult = inCTOS_ChkBatchEmpty();
	if(d_OK != inResult)
	{
		return;
	}

    memset(&srAccumRec, 0x00, sizeof(ACCUM_REC));
    if((inResult = inCTOS_ReadAccumTotal(&srAccumRec)) == ST_ERROR)
    {
        vdMyEZLib_LogPrintf("[vdUpdateAmountTotal]---Read Total Rec. error");
        return;    
    }

    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

	CTOS_PrinterSetHeatLevel(4);
    
	ushCTOS_PrintHeader(0);	
    
    //vdPrintTitleCenter("SUMMARY REPORT");
	CTOS_PrinterFline(d_LINE_DOT * 1);
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

    //printHostLabel();
    
	printTIDMID();
    
	printDateTime();
    
	printBatchNO();

    CTOS_PrinterFline(d_LINE_DOT * 1);
	vdPrintCenter("*** TRANSACTION TOTALS BY ISSUER ***");
	CTOS_PrinterFline(d_LINE_DOT * 1);

    CTOS_PrinterFline(d_LINE_DOT * 1);
	for(inTranCardType = 0; inTranCardType < 1 ;inTranCardType ++)
	{
		inReportType = PRINT_CARD_TOTAL;
		
		if(inReportType == PRINT_CARD_TOTAL)
		{
			for(i= 0; i <20; i ++ )
			{
				vdDebug_LogPrintf("--Count[%d]", i);
				if((srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usRefundCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usVoidSaleCount == 0)			
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usReloadCCCount == 0))
					continue;
				
				
				vdDebug_LogPrintf("Count[%d]", i); 
				inIITRead(i);
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));
				//strcpy(szStr,strIIT.szIssuerLabel);

		        //sprintf(szBuff,"HOST%s%s",szSPACE,srTransRec.szHostLabel);
				sprintf(szStr,"ISSUER: %s",strIIT.szIssuerLabel);

                sprintf(szBuff,"HOST             %s",srTransRec.szHostLabel);
				
				inPrintLeftRight(szStr,szBuff,46);
				
				vdCTOS_PrintAccumeByHostAndCard (inReportType, 
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulRefundTotalAmount), 
												
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulVoidSaleTotalAmount), 

												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulOffSaleTotalAmount),
//1010
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulReloadCCTotalAmount)
//1010
												);	
			}
			//after print issuer total, then print host toal
			{
			
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));
				strcpy(szStr,"TOTAL:");
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				vdCTOS_PrintAccumeByHostAndCard (inReportType, 
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
													
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulRefundTotalAmount), 
													
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulVoidSaleTotalAmount), 

													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
//1010
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulReloadCCTotalAmount)
//1010

													);		
			}
		}
		else
		{
		
			memset(szStr, ' ', d_LINE_SIZE);
			memset (baTemp, 0x00, sizeof(baTemp));
			strcpy(szStr,srTransRec.szHostLabel);
			CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
			CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
			vdCTOS_PrintAccumeByHostAndCard (inReportType, 
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulRefundTotalAmount), 
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulVoidSaleTotalAmount), 

												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
//1010
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulReloadCCTotalAmount)
//1010

												);		
		}
	}
    
	//print space one line
	CTOS_PrinterFline(d_LINE_DOT * 2);		
	CTOS_PrinterFline(d_LINE_DOT * 2);
	CTOS_PrinterFline(d_LINE_DOT * 2);
	
	return;	
}

void vdCTOS_PrintDetailReport()
{
	unsigned char chkey;
	short shHostIndex;
	int inResult,i,inCount,inRet;
	int inTranCardType;
	int inReportType;
	int inBatchNumOfRecord;
	int *pinTransDataid;

	if( printCheckPaper()==-1)
		return;
		
	//by host and merchant
	shHostIndex = inCTOS_SelectHostSetting();
	if (shHostIndex == -1)
		return;

	strHDT.inHostIndex = shHostIndex;
	DebugAddINT("summary host Index",shHostIndex);

	if (inMultiAP_CheckMainAPStatus() == d_OK)
	{
		inRet = inCTOS_MultiAPSaveData(d_IPC_CMD_DETAIL_REPORT);
		if(d_OK != inRet)
			return ;
	}
	else
	{
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		{
			inRet = inCTOS_MultiAPGetData();
			if(d_OK != inRet)
				return ;

			inRet = inCTOS_MultiAPReloadHost();
			if(d_OK != inRet)
				return ;
		}
	}

	inResult = inCTOS_CheckAndSelectMutipleMID();
	DebugAddINT("summary MITid",srTransRec.MITid);
	if(d_OK != inResult)
		return;

    inResult = inCTOS_ChkBatchEmpty();
    if(d_OK != inResult)
        return;
	
	inBatchNumOfRecord = inBatchNumRecord();
	
	DebugAddINT("batch record",inBatchNumOfRecord);
	if(inBatchNumOfRecord <= 0)
	{
		vdDisplayErrorMsg(1, 8, "BATCH EMPTY");
		return;
	}

    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
    vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
    
	ushCTOS_printBatchRecordHeader();
	
	pinTransDataid = (int*)malloc(inBatchNumOfRecord  * sizeof(int));
	inCount = 0;		
	inBatchByMerchandHost(inBatchNumOfRecord, srTransRec.HDTid, srTransRec.MITid, srTransRec.szBatchNo, pinTransDataid);
	for(i=0; i<inBatchNumOfRecord; i++)
	{
		inResult = inDatabase_BatchReadByTransId(&srTransRec, pinTransDataid[inCount]);
        inCount ++;
		ushCTOS_printBatchRecordFooter();	
	}

    CTOS_PrinterFline(d_LINE_DOT * 5);

	
	return;	
}




int inCTOS_rePrintLastReceipt(void)
{
	int   inResult;
	BYTE  szInvNoAsc[6+1];
	BYTE  szInvNoBcd[3];	
    BOOL   needSecond = TRUE;	
    BYTE   key;
	//1027
	BOOL   needThird = TRUE;	

	/*BDO: Parameterized receipt printing - start*/
	BOOL BankCopy, CustCopy, MercCopy;
	BOOL fFirstReceiptPrinted = VS_FALSE;
	/*BDO: Parameterized receipt printing - end*/

	
	CTOS_PrinterSetHeatLevel(strTCT.inPrinterHeatLevel);
	if( printCheckPaper()==-1)
		return d_NO;
	
	memcpy(srTransRec.szInvoiceNo,strTCT.szLastInvoiceNo,INVOICE_BCD_SIZE);
	DebugAddHEX("last invoice", strTCT.szLastInvoiceNo,3 );

	if (inMultiAP_CheckMainAPStatus() == d_OK)
	{
		inResult = inCTOS_MultiAPBatchSearch(d_IPC_CMD_REPRINT_LAST);
		if(d_OK != inResult)
			return inResult;
	}
	else
	{
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		{
			inResult = inCTOS_MultiAPGetVoid();
			if(d_OK != inResult)
				return inResult;
		}		
		inResult = inCTOS_BatchSearch();
		if(d_OK != inResult)
			return inResult;
	}

	/*BDO: Parameterized receipt printing - start*/
	inHDTRead(srTransRec.HDTid);

	if (srTransRec.byTransType == VOID){
		BankCopy = strHDT.fPrintVoidBankReceipt;
		CustCopy = strHDT.fPrintVoidCustReceipt;
		MercCopy = strHDT.fPrintVoidMercReceipt;
	}else{
		BankCopy = strHDT.fPrintBankReceipt;
		CustCopy = strHDT.fPrintCustReceipt;
		MercCopy = strHDT.fPrintMercReceipt;
	}

	//remove later
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::srTransRec.HDTid = [%d]", srTransRec.HDTid);
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::BankCopy = [%d]", BankCopy);
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::CustCopy = [%d]", CustCopy);
	vdDebug_LogPrintf("JEFF inCTOS_rePrintLastReceipt::MercCopy = [%d]", MercCopy);
	/*BDO: Parameterized receipt printing - end*/

	//1026
	inCSTRead(srTransRec.HDTid); // sidumili: commented
	//1026


	//BDO: Reload IIT to properly load PAN masking during reprint - start -- jzg
	vdDebug_LogPrintf("JEFF::IITid [%d]", srTransRec.IITid);
	inIITRead(srTransRec.IITid);
	//BDO: Reload IIT to properly load PAN masking during reprint - end -- jzg

	/*BDO: Parameterized receipt printing - start*/
	if(BankCopy == TRUE){
		inResult = ushCTOS_printAll(d_FIRST_PAGE);
		CTOS_KBDBufFlush();//cleare key buffer
		fFirstReceiptPrinted = TRUE;
	}
	/*BDO: Parameterized receipt printing - end*/
		
	if(CustCopy == TRUE)
	{
		CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  

		vduiDisplayStringCenter(7,"CUSTOMER COPY");
		vduiDisplayStringCenter(8,"NO[X] YES[OK]");

		while(1)
		{ 
			if (strTCT.fPrintWarningSound == TRUE) /*BDO PHASE 2: [Warning sound for printing flag] -- sidumili*/
			vduiWarningSound();
			
			CTOS_KBDHit(&key);
			if(key == d_KBD_ENTER)
			{
				break;
			}
			else if((key == d_KBD_CANCEL))
			{
				needSecond = FALSE;
				break;
			}
			if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
			{
				break;
			}		
		}
		
		if(needSecond){
			inResult=ushCTOS_printAll(d_SECOND_PAGE);	
			CTOS_KBDBufFlush();
		}
	
	}

	// patrick fix code 20141209
			CTOS_KBDBufFlush();
			needThird = TRUE;

	if(MercCopy == TRUE)
	{
		CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
	
		vduiDisplayStringCenter(7,"MERCHANT COPY");
		vduiDisplayStringCenter(8,"NO[X] YES[OK]");
	
		while(1)
		{ 
			if (strTCT.fPrintWarningSound == TRUE) /*BDO PHASE 2: [Warning sound for printing flag] -- sidumili*/
			vduiWarningSound();
				
			CTOS_KBDHit(&key);
			if(key == d_KBD_ENTER)
			{
				break;
			}
			else if((key == d_KBD_CANCEL))
			{
				needThird = FALSE;
				break;
			}
				if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
				{
					break;
				}		
			}
			
			if(needThird){
				inResult=ushCTOS_printAll(d_THIRD_PAGE);				
				CTOS_KBDBufFlush();
			}
	
		
		}


	return d_OK;
}

/*BDO: Parameterized receipt printing - start*/
#if 1
USHORT ushCTOS_printReceipt(void)
{
    USHORT result;
    BYTE   key;
    BOOL   needSecond = TRUE;
		//1027
		BOOL   needThird = TRUE;	

    BOOL BankCopy, CustCopy, MercCopy;
		BOOL fFirstReceiptPrinted = VS_FALSE;
		
     
		if (srTransRec.byTransType == VOID){
			BankCopy = strHDT.fPrintVoidBankReceipt;
			CustCopy = strHDT.fPrintVoidCustReceipt;
			MercCopy = strHDT.fPrintVoidMercReceipt;
		}else{
			BankCopy = strHDT.fPrintBankReceipt;
			CustCopy = strHDT.fPrintCustReceipt;
			MercCopy = strHDT.fPrintMercReceipt;
		}

	
    
    if( printCheckPaper()==-1)
    	return -1;

	vdDisplayAnimateBmp(0,0, "Printer1(320240).bmp", "Printer2(320240).bmp", "Printer3(320240).bmp", NULL, NULL);
    //gcitra
	if (srTransRec.byTransType == CASH_LOYALTY){
		result = ushCTOS_printAll(d_SECOND_PAGE);
		CTOS_KBDBufFlush();//cleare key buffer
	    	return (d_OK);
	}
    //gcitra

    if(BankCopy == TRUE){
    	result = ushCTOS_printAll(d_FIRST_PAGE);
	  	CTOS_KBDBufFlush();//cleare key buffer
	  	fFirstReceiptPrinted = TRUE;
    }

    if(CustCopy == TRUE)
    {
        if (fFirstReceiptPrinted == TRUE){
        	CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
					vduiDisplayStringCenter(7,"CUSTOMER COPY");
					vduiDisplayStringCenter(8,"NO[X] YES[OK]");

        	while(1)
        	{ 
        		if (strTCT.fPrintWarningSound == TRUE) /*BDO PHASE 2: [Warning sound for printing flag] -- sidumili*/
						vduiWarningSound();
			
            CTOS_KBDHit(&key);
            if(key == d_KBD_ENTER)
            {
                break;
            }
            else if((key == d_KBD_CANCEL))
            {
                needSecond = FALSE;
                break;
            }
            if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
            {
                break;
            }		
        	}
        }


				if(needSecond){
					result=ushCTOS_printAll(d_SECOND_PAGE);			            
					CTOS_KBDBufFlush();				
					fFirstReceiptPrinted = TRUE;
				}
    }
		
	if(MercCopy == TRUE)
	{
		
		if (fFirstReceiptPrinted == TRUE){
			CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
			vduiDisplayStringCenter(7,"MERCHANT COPY");
			vduiDisplayStringCenter(8,"NO[X] YES[OK]");
		
			while(1)
			{ 
				if (strTCT.fPrintWarningSound == TRUE) /*BDO PHASE 2: [Warning sound for printing flag] -- sidumili*/
				vduiWarningSound();
				
				CTOS_KBDHit(&key);
				if(key == d_KBD_ENTER)
				{
					break;
				}
					else if((key == d_KBD_CANCEL))
				{
					needThird = FALSE;
					break;
				}
				if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
				{
					break;
				}		
			}
		
		}
		
		if(needThird)
		{		
			result=ushCTOS_printAll(d_THIRD_PAGE); 				
			CTOS_KBDBufFlush();
		}
	}


	return (d_OK);
}

#endif

#if 0
USHORT ushCTOS_printReceipt(void)
{
    USHORT result;
    BYTE   key;
    BOOL   needSecond = TRUE;
	//1027
	BOOL   needThird = TRUE;	
    
    if( printCheckPaper()==-1)
    	return -1;

	vdDisplayAnimateBmp(0,0, "Printer1(320240).bmp", "Printer2(320240).bmp", "Printer3(320240).bmp", NULL, NULL);


    result = ushCTOS_printAll(d_FIRST_PAGE);
	CTOS_KBDBufFlush();//cleare key buffer


    if(result == d_OK)
    {
        CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
		vduiDisplayStringCenter(7,"CUSTOMER COPY");
		vduiDisplayStringCenter(8,"NO[X] YES[OK]");

        while(1)
        { 
			vduiWarningSound();
			
            CTOS_KBDHit(&key);
            if(key == d_KBD_ENTER)
            {
                break;
            }
            else if((key == d_KBD_CANCEL))
            {
                needSecond = FALSE;
                break;
            }
            if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
            {
                break;
            }		
        }


		if(needSecond)
		{
			result=ushCTOS_printAll(d_SECOND_PAGE);			            
			CTOS_KBDBufFlush();
		}
    }
		
	if(result == d_OK)
	{
		CTOS_TimeOutSet(TIMER_ID_1, UI_TIMEOUT);  
		vduiDisplayStringCenter(7,"MERCHANT COPY");
		vduiDisplayStringCenter(8,"NO[X] YES[OK]");
		
		while(1)
		{ 
			vduiWarningSound();
				
			CTOS_KBDHit(&key);
			if(key == d_KBD_ENTER)
			{
				break;
			}
			else if((key == d_KBD_CANCEL))
			{
				needThird = FALSE;
				break;
			}
			if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
			{
				break;
			}		
		}
		
		
		if(needThird)
		{
			result=ushCTOS_printAll(d_THIRD_PAGE); 				
			CTOS_KBDBufFlush();
		}
	}


	return (d_OK);
}

#endif
/*BDO: Parameterized receipt printing - end*/

USHORT ushCTOS_printErrorReceipt(void)
{
    USHORT result;
    BYTE   key;
    BOOL   needSecond = TRUE;
	
	char szStr[d_LINE_SIZE + 1];
   char szTemp[d_LINE_SIZE + 1];
   char szTemp1[d_LINE_SIZE + 1];
   char szTemp3[d_LINE_SIZE + 1];
   char szTemp4[d_LINE_SIZE + 1];
   char szTemp5[d_LINE_SIZE + 1];
   char szFormatPAN[strlen(srTransRec.szPAN) + 7];//to account for space as in PAN format and to include additional PAN no. 7 has been added -Meena 08/01/2012
   int inFmtPANSize;
   BYTE baTemp[PAPER_X_SIZE * 64];
   CTOS_FONT_ATTRIB stFONT_ATTRIB;
   int num,i,inResult;
   unsigned char tucPrint [24*4+1];    
   BYTE   EMVtagVal[64];
   USHORT EMVtagLen; 
   short spacestring;

    
    if( printCheckPaper()==-1)
    	return -1;

	memcpy(strTCT.szLastInvoiceNo,srTransRec.szInvoiceNo,INVOICE_BCD_SIZE);
	
	if((inResult = inTCTSave(1)) != ST_SUCCESS)
    {
		vdDisplayErrorMsg(1, 8, "Update TCT fail");
    }
	
	DebugAddHEX("LastInvoiceNum", strTCT.szLastInvoiceNo,3);

	inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
    vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
    
    CTOS_PrinterSetHeatLevel(4);  
	DebugAddSTR("ushCTOS_printAll","print...",20);
		

	ushCTOS_PrintHeader(d_FIRST_PAGE);

	memset(szTemp1, ' ', d_LINE_SIZE);
	sprintf(szTemp1,"%s",srTransRec.szHostLabel);
	vdPrintCenter(szTemp1);
	
	printDateTime();

    printTIDMID(); 
	
	printBatchInvoiceNO();
	
	szGetTransTitle(srTransRec.byTransType, szStr);     
		vdPrintTitleCenter(szStr);    
    if(srTransRec.byTransType == SETTLE)
    {
        DebugAddSTR("settle","print...",20);
    }
    else
    {
        vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
    	memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
    	EMVtagLen = 0;
    	memset(szStr, ' ', d_LINE_SIZE);
    	vdMyEZLib_LogPrintf("CDT index: %d",srTransRec.CDTid);

    	sprintf(szStr, "%s", srTransRec.szCardLable);
    	vdMyEZLib_LogPrintf("Card label: %s",srTransRec.szCardLable);
    	
    	memset (baTemp, 0x00, sizeof(baTemp));
    	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

    	cardMasking(srTransRec.szPAN, PRINT_CARD_MASKING_1);
    	strcpy(szTemp4, srTransRec.szPAN);
    	memset (baTemp, 0x00, sizeof(baTemp));
    	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szTemp4, &stgFONT_ATTRIB);
    	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);		

        vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
        
    	//Exp date and Entry mode
    	memset(szStr, ' ', d_LINE_SIZE);
    	memset(szTemp, 0, sizeof(szTemp));
    	memset(szTemp1, 0, sizeof(szTemp1));
    	memset(szTemp4, 0, sizeof(szTemp4));
    	memset(szTemp5, 0, sizeof(szTemp5));
    	wub_hex_2_str(srTransRec.szExpireDate, szTemp,EXPIRY_DATE_BCD_SIZE);
    	DebugAddSTR("EXP",szTemp,12);  
    	
    	for (i =0; i<4;i++)
    		szTemp[i] = '*';
    	memcpy(szTemp4,&szTemp[0],2);
    	memcpy(szTemp5,&szTemp[2],2);

    	if(srTransRec.byEntryMode==CARD_ENTRY_ICC)
    		memcpy(szTemp1,"Chip",4);
    	else if(srTransRec.byEntryMode==CARD_ENTRY_MANUAL)
    		memcpy(szTemp1,"Manual",6);
    	else if(srTransRec.byEntryMode==CARD_ENTRY_MSR)
			memcpy(szTemp1,"Swipe",5);
    	else if(srTransRec.byEntryMode==CARD_ENTRY_FALLBACK)
    		memcpy(szTemp1,"Fallback",8);
    	
    	memset (baTemp, 0x00, sizeof(baTemp));
    	sprintf(szTemp,"%s%s/%s          %s%s","EXP: ",szTemp4,szTemp5,"ENT:",szTemp1);
    	
    	DebugAddSTR("ENT:",baTemp,12);  
    	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szTemp, &stgFONT_ATTRIB);
    	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

    		
     	memset (baTemp, 0x00, sizeof(baTemp));
    	stFONT_ATTRIB.FontSize = 0x1010;
        stFONT_ATTRIB.X_Zoom = DOUBLE_SIZE;       // The width magnifies X_Zoom diameters
        stFONT_ATTRIB.Y_Zoom = DOUBLE_SIZE;       // The height magnifies Y_Zoom diameters

        stFONT_ATTRIB.X_Space = 0;      // The width of the space between the font with next font

    }

	memset(szStr, ' ', d_LINE_SIZE);
	memset(szTemp, ' ', d_LINE_SIZE);
	memset(szTemp1, ' ', d_LINE_SIZE);
	sprintf(szStr, "%s", "TRANS NOT SUC.");
	
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

	memset(szStr, ' ', d_LINE_SIZE);
	memset(szTemp, ' ', d_LINE_SIZE);
	memset(szTemp1, ' ', d_LINE_SIZE);
	
	sprintf(szStr, "%s", "PLS TRY AGAIN");
	
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

	CTOS_PrinterFline(d_LINE_DOT * 6); 
	
	//inSetTextMode();
    return (d_OK);
}


int inCTOS_REPRINT_ANY()
{
    char szErrMsg[30+1];
    int   inResult;
	
	fRePrintFlag = TRUE;
    vdCTOS_SetTransType(REPRINT_ANY);
	inResult = inCTOS_rePrintReceipt();

    memset(szErrMsg,0x00,sizeof(szErrMsg));
    if (inGetErrorMessage(szErrMsg) > 0)
    {
        vdDisplayErrorMsg(1, 8, szErrMsg);
        vdSetErrorMessage("");
    }
    
    memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));
    CTOS_KBDBufFlush();
	fRePrintFlag = FALSE;
	return inResult;
}

int inCTOS_REPRINT_LAST()
{
    char szErrMsg[30+1];
	int   inResult;
    
	fRePrintFlag = TRUE;
	inResult = inCTOS_rePrintLastReceipt();	

    memset(szErrMsg,0x00,sizeof(szErrMsg));
    if (inGetErrorMessage(szErrMsg) > 0)
    {
        vdDisplayErrorMsg(1, 8, szErrMsg);
        vdSetErrorMessage("");
    }
    
    memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));
    CTOS_KBDBufFlush();
	fRePrintFlag = FALSE;
	
	return inResult;
}

int inCTOS_PRINTF_SUMMARY()
{
    char szErrMsg[30+1];
    
	vdCTOS_PrintSummaryReport();	

    memset(szErrMsg,0x00,sizeof(szErrMsg));
    if (inGetErrorMessage(szErrMsg) > 0)
    {
        vdDisplayErrorMsg(1, 8, szErrMsg);
        vdSetErrorMessage("");
    }
    
    memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));
    CTOS_KBDBufFlush();
    
	return d_OK;
	
}

int inCTOS_PRINTF_DETAIL()
{
    char szErrMsg[30+1];
    
	vdCTOS_PrintDetailReport();	

    memset(szErrMsg,0x00,sizeof(szErrMsg));
    if (inGetErrorMessage(szErrMsg) > 0)
    {
        vdDisplayErrorMsg(1, 8, szErrMsg);
        vdSetErrorMessage("");
    }
    
    memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));
    CTOS_KBDBufFlush();
    
	return d_OK;
	
}

int inCTOS_REPRINTF_LAST_SETTLEMENT()
{
    char szErrMsg[30+1];
    
	ushCTOS_ReprintLastSettleReport();
    
    memset(szErrMsg,0x00,sizeof(szErrMsg));
    if (inGetErrorMessage(szErrMsg) > 0)
    {
        vdDisplayErrorMsg(1, 8, szErrMsg);
        vdSetErrorMessage("");
    }
    memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));
    CTOS_KBDBufFlush();
    
	return d_OK;
}

void vdCTOS_PrintAccumeByHostAndCard (int inReportType,
	USHORT usSaleCount, 
	double ulSaleTotalAmount,    
	USHORT usRefundCount,
	double  ulRefundTotalAmount,    
	USHORT usVoidSaleCount,
	double  ulVoidSaleTotalAmount,
	USHORT usOffSaleCount,
	double  ulOffSaleTotalAmount,
	//10101
	USHORT usReloadCount, 
	double  ulReloadTotalAmount)
	//10101
{
	char szStr[d_LINE_SIZE + 1] = {0};
	char szTemp[d_LINE_SIZE + 3] = {0}, 
	szTemp1[d_LINE_SIZE + 3] = {0}, 
	szTemp2[d_LINE_SIZE + 3] = {0};
	USHORT usTotalCount = 0;
	double  ulTotalAmount = 0.00;
	BYTE baTemp[PAPER_X_SIZE * 64] = {0};

	char szBuff[47] = {0};
	int inPADSize = 0,
	x = 0;
	char szSPACE[40] = {0};

	CTOS_PrinterSetHeatLevel(4);  
	memset (baTemp, 0x00, sizeof(baTemp));		

	//types
	/*		memset(szStr, ' ', d_LINE_SIZE);
	strcpy(szStr,"TYPES  COUNT  CUR            AMT");
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
	CTOS_PrinterFline(d_LINE_DOT * 1);
	*/		

	//sale
	memset(szStr, 0x00, sizeof(szStr));
	memset(szBuff, 0x00, sizeof(szBuff));
	memset(szTemp1, 0x00, sizeof(szTemp1));	
	memset(szTemp2, 0x00, sizeof(szTemp2));
	sprintf(szTemp1,"%.0f", ulSaleTotalAmount+ulOffSaleTotalAmount);		
	vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
	sprintf(szBuff,"%s%s",strCST.szCurSymbol,szTemp2);
	sprintf(szStr,"  SALE     %04d",usSaleCount+usOffSaleCount);
	inPrintLeftRight(szStr,szBuff,46);


	//reload
	memset(szStr, 0x00, sizeof(szStr));
	memset(szBuff, 0x00, sizeof(szBuff));	
	memset(szTemp1, 0x00, sizeof(szTemp1));	
	memset(szTemp2, 0x00, sizeof(szTemp2));
	sprintf(szTemp1,"%.0f", ulReloadTotalAmount);		
	vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
	sprintf(szBuff,"%s%s",strCST.szCurSymbol,szTemp2);
	sprintf(szStr,"  RELOAD   %04d",usReloadCount);
	inPrintLeftRight(szStr,szBuff,46);


	//offline sale
	//memset(szStr, ' ', d_LINE_SIZE);
	//sprintf(szStr,"OFFLINE  %3d  %s  %10lu.%02lu", usOffSaleCount, strCST.szCurSymbol,ulOffSaleTotalAmount/100, ulOffSaleTotalAmount%100);
	//memset (baTemp, 0x00, sizeof(baTemp));
	//CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
	//CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);		

	//void
	memset(szStr, 0x00, sizeof(szStr));
	memset(szBuff, 0x00, sizeof(szBuff));
	memset(szTemp1, 0x00, sizeof(szTemp1));	
	memset(szTemp2, 0x00, sizeof(szTemp2));
	sprintf(szTemp1,"%.0f", ulVoidSaleTotalAmount);		
	vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
	sprintf(szBuff,"%s%s",strCST.szCurSymbol,szTemp2);
	sprintf(szStr,"  VOID     %04d",usVoidSaleCount);
	inPrintLeftRight(szStr,szBuff,46);


	//refund
	memset(szStr, 0x00, sizeof(szStr));
	memset(szBuff, 0x00, sizeof(szBuff));
	memset(szTemp1, 0x00, sizeof(szTemp1));	
	memset(szTemp2, 0x00, sizeof(szTemp2));
	sprintf(szTemp1,"%.0f", ulRefundTotalAmount);		
	vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
	sprintf(szBuff,"%s%s",strCST.szCurSymbol,szTemp2);
	sprintf(szStr,"  REF.     %04d",usRefundCount);
	inPrintLeftRight(szStr,szBuff,46);

	//CTOS_PrinterPutString("----------------------------------------------");

	usTotalCount = usSaleCount + usOffSaleCount + usRefundCount;
	memset(szStr, ' ', d_LINE_SIZE);
	memset(szTemp, ' ', d_LINE_SIZE);
	if (inReportType == PRINT_HOST_TOTAL)
	{
		if(ulRefundTotalAmount > (ulSaleTotalAmount+ulOffSaleTotalAmount))
		{
			ulTotalAmount = ulRefundTotalAmount - (ulSaleTotalAmount+ulOffSaleTotalAmount);
			memset(szTemp1, 0x00, sizeof(szTemp1)); 
			memset(szTemp2, 0x00, sizeof(szTemp2));
			sprintf(szTemp1,"%.0f", ulTotalAmount);		
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
			sprintf(szTemp,"-%s%s",strCST.szCurSymbol,szTemp2);
			sprintf(szStr,"  TOT.     %04d", usTotalCount);	
			inPrintLeftRight(szStr,szTemp,46);
		}
		else
		{
			ulTotalAmount = (ulSaleTotalAmount+ulOffSaleTotalAmount) - ulRefundTotalAmount;
			memset(szTemp1, 0x00, sizeof(szTemp1)); 
			memset(szTemp2, 0x00, sizeof(szTemp2));
			sprintf(szTemp1,"%.0f", ulTotalAmount);		
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
			sprintf(szTemp,"%s%s",strCST.szCurSymbol,szTemp2);
			sprintf(szStr,"  TOT.     %04d", usTotalCount);							
			inPrintLeftRight(szStr,szTemp,46);
		}
	}
	else if(inReportType == PRINT_CARD_TOTAL)
	{
		if(ulRefundTotalAmount > (ulSaleTotalAmount+ulOffSaleTotalAmount))
		{
			ulTotalAmount = ulRefundTotalAmount - (ulSaleTotalAmount+ulOffSaleTotalAmount);
			memset(szTemp1, 0x00, sizeof(szTemp1)); 
			memset(szTemp2, 0x00, sizeof(szTemp2));
			sprintf(szTemp1,"%.0f", ulTotalAmount);		
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
			sprintf(szTemp,"-%s%s",strCST.szCurSymbol,szTemp2);
			sprintf(szStr,"  TOT.     %04d", usTotalCount);	
			inPrintLeftRight(szStr,szTemp,46);
		}
		else
		{
			ulTotalAmount = (ulSaleTotalAmount+ulOffSaleTotalAmount) - ulRefundTotalAmount;
			memset(szTemp1, 0x00, sizeof(szTemp1)); 
			memset(szTemp2, 0x00, sizeof(szTemp2));
			sprintf(szTemp1,"%.0f", ulTotalAmount);		
			vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp1,szTemp2);
			sprintf(szTemp,"%s%s",strCST.szCurSymbol,szTemp2);
			sprintf(szStr,"  TOT.     %04d", usTotalCount);							
			inPrintLeftRight(szStr,szTemp,46);
		}	 
	}

	//memset (baTemp, 0x00, sizeof(baTemp));
	//CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
	//CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 

	CTOS_PrinterFline(d_LINE_DOT * 1);
}

int inCTOS_SelectFont(int inFontMode,int inFontSize ,int inFontStyle,char * szFontName)
{
	if(inFontMode == d_FONT_TTF_MODE)
	{
		CTOS_PrinterFontSelectMode(d_FONT_TTF_MODE);	//set the printer with TTF Mode
		CTOS_PrinterTTFSelect("times.ttf", inFontStyle);
	}
	else
	{
	
		CTOS_PrinterFontSelectMode(d_FONT_FNT_MODE);	//set the printer with default Mode
		CTOS_LanguagePrinterFontSize(inFontSize, 0, TRUE);		
	}
	return d_OK;
	
}

int inCTOS_PrintSettleReport(void)
{
	ACCUM_REC srAccumRec;
	unsigned char chkey;
	short shHostIndex;
	int inResult;
	int inTranCardType;
	int inReportType;
	int i;		
	char szStr[d_LINE_SIZE + 1];
	BYTE baTemp[PAPER_X_SIZE * 64];	

	if( printCheckPaper()==-1)
		return;

	inResult = inCTOS_ChkBatchEmpty();
	if(d_OK != inResult)
	{
		return;
	}
    
	memset(&srAccumRec, 0x00, sizeof(ACCUM_REC));
    if((inResult = inCTOS_ReadAccumTotal(&srAccumRec)) == ST_ERROR)
    {
        vdMyEZLib_LogPrintf("[vdUpdateAmountTotal]---Read Total Rec. error");
		vdSetErrorMessage("Read Accum Error");
        return ST_ERROR;    
    }
    
    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

	CTOS_PrinterSetHeatLevel(4);
    
	ushCTOS_PrintHeader(0);	
    
    //vdPrintTitleCenter("SETTLEMENT");
	CTOS_PrinterFline(d_LINE_DOT * 1);

    //printHostLabel();
    
	printTIDMID();
    
	printDateTime();
    
	printBatchNO();

	/* BDO: if settlement title should be "SETTLEMENT CLOSED", if manual posting "SUMMARY REPORT" */
		vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
		if (srTransRec.byTransType == SETTLE)
			vdPrintCenter("SETTLEMENT CLOSED");
		else
			vdPrintCenter("SUMMARY REPORT");
		vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);



    CTOS_PrinterFline(d_LINE_DOT * 1);
	for(inTranCardType = 0; inTranCardType < 1 ;inTranCardType ++)
	{
		inReportType = PRINT_CARD_TOTAL;
		
		if(inReportType == PRINT_CARD_TOTAL)
		{
			for(i= 0; i <20; i ++ )
			{
				vdDebug_LogPrintf("--Count[%d]", i);
				if((srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usRefundCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usVoidSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usReloadCCCount == 0))
				
					continue;
				
				vdDebug_LogPrintf("Count[%d]", i); 
				inIITRead(i);
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));
				strcpy(szStr,strIIT.szIssuerLabel);
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				
				vdCTOS_PrintAccumeByHostAndCard (inReportType, 
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulRefundTotalAmount), 
												
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulVoidSaleTotalAmount), 

												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulOffSaleTotalAmount),
//1010
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulReloadCCTotalAmount)
//1010

												);	
			}
			//after print issuer total, then print host toal
			{
			
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));
				strcpy(szStr,"TOTAL:");
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				vdCTOS_PrintAccumeByHostAndCard (inReportType, 
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
													
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulRefundTotalAmount), 
													
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulVoidSaleTotalAmount), 

													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
//1010
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulReloadCCTotalAmount)
//1010

													);		
			}
		}
		else
		{
		
			memset(szStr, ' ', d_LINE_SIZE);
			memset (baTemp, 0x00, sizeof(baTemp));
			strcpy(szStr,srTransRec.szHostLabel);
			CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
			CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
			vdCTOS_PrintAccumeByHostAndCard (inReportType, 
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulRefundTotalAmount), 
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulVoidSaleTotalAmount), 

												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
//1010
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulReloadCCTotalAmount)
//1010
												);		
		}
	}
    
	//print space one line
	CTOS_PrinterFline(d_LINE_DOT * 2);		
	CTOS_PrinterFline(d_LINE_DOT * 2);
	CTOS_PrinterFline(d_LINE_DOT * 2);
	
	return d_OK;	
}

USHORT ushCTOS_printBatchRecordHeader(void)
{
	USHORT result;
	BYTE baTemp[PAPER_X_SIZE * 64];


	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

    ushCTOS_PrintHeader(0);	
    
    vdPrintTitleCenter("DETAIL REPORT");
	CTOS_PrinterFline(d_LINE_DOT * 1);

    //printHostLabel();
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
  
	printTIDMID();
    
	printDateTime();
    
	printBatchNO();
    
    CTOS_PrinterFline(d_LINE_DOT * 1);
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, "CARD NAME                    CARD NUMBER", &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
	memset (baTemp, 0x00, sizeof(baTemp));

	
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, "EXP DATE                     TRACE NUMBER", &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
	memset (baTemp, 0x00, sizeof(baTemp));

	
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, "TRANSACTION                  AMOUNT", &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
	memset (baTemp, 0x00, sizeof(baTemp));

	
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, "APPROVAL CODE", &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

	printDividingLine(DIVIDING_LINE);
	return d_OK;
}



USHORT ushCTOS_printBatchRecordFooter(void)
{
	BYTE baTemp[PAPER_X_SIZE * 64];		
	char szStr[d_LINE_SIZE + 1];
	char szPrintBuf[d_LINE_SIZE + 1];
	char szTempBuf1[d_LINE_SIZE + 1];
	char szTempBuf2[d_LINE_SIZE + 1];
	char szTempBuf3[d_LINE_SIZE + 1];

	int i;

	char szTemp[d_LINE_SIZE + 3];


	DebugAddSTR("ushCTOS_printBatchRecordFooter", srTransRec.szPAN, 10);
	memset(szTempBuf1,0,sizeof(szTempBuf1));
	memset(szTempBuf2, 0, sizeof(szTempBuf2));
	strcpy(szTempBuf1,srTransRec.szPAN);    
    inIITRead(srTransRec.IITid);
	strcpy(szTempBuf2,strIIT.szIssuerLabel);
	cardMasking(szTempBuf1, PRINT_CARD_MASKING_3);

    memset (szPrintBuf, 0x00, sizeof(szPrintBuf));
    strcpy(szPrintBuf, szTempBuf2);
    memset(&szPrintBuf[strlen(szPrintBuf)], 0x20, 29-strlen(szTempBuf2));
    strcat(szPrintBuf, szTempBuf1);
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1,szPrintBuf , &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
	

	//Exp date and inv num
	memset(szTempBuf1, 0, sizeof(szTempBuf1));
	memset(szTempBuf2, 0, sizeof(szTempBuf2));
	memset(szTempBuf3, 0, sizeof(szTempBuf3));
	
	wub_hex_2_str(srTransRec.szExpireDate, szTempBuf1,EXPIRY_DATE_BCD_SIZE);
	DebugAddSTR("detail--EXP",szTempBuf1,12);  
	
	for (i =0; i<4;i++)
		szTempBuf1[i] = '*';
	memcpy(szTempBuf2,&szTempBuf1[0],2);
	memcpy(szTempBuf3,&szTempBuf1[2],2);

	memset(szStr, 0,sizeof(szStr));
	wub_hex_2_str(srTransRec.szInvoiceNo, szStr, INVOICE_BCD_SIZE);
		
	memset (szPrintBuf, 0x00, sizeof(szPrintBuf));
    strcpy(szPrintBuf, szTempBuf2);
    strcat(szPrintBuf, szTempBuf3);
    memset(&szPrintBuf[strlen(szPrintBuf)], 0x20, 29-strlen(szTempBuf2)-strlen(szTempBuf3));
    strcat(szPrintBuf, szStr);
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1,szPrintBuf , &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

	memset(szStr, 0,sizeof(szStr));
	memset(szTempBuf1, 0,sizeof(szTempBuf1));
	memset(szTempBuf2, 0,sizeof(szTempBuf2));
	szGetTransTitle(srTransRec.byTransType, szStr);
	wub_hex_2_str(srTransRec.szTotalAmount, szTempBuf1, AMT_BCD_SIZE);
	
	memset(szTemp, 0x00, sizeof(szTemp)); 
	
	sprintf(szTemp,"%s", szTempBuf1);		
	vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szTemp,szTempBuf2);

	//sprintf(szTempBuf2, "%lu.%02lu", atol(szTempBuf1)/100, atol(szTempBuf1)%100);

	memset (szPrintBuf, 0x00, sizeof(szPrintBuf));
    strcpy(szPrintBuf, szStr);
    memset(&szPrintBuf[strlen(szPrintBuf)], 0x20, 29-strlen(szStr));
    strcat(szPrintBuf, szTempBuf2);
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1,szPrintBuf , &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);


	
/*	memset(szTempBuf2, 0,sizeof(szTempBuf2));
	if(srTransRec.byEntryMode==CARD_ENTRY_ICC)
		memcpy(szTempBuf2,"Chip",4);
	else if(srTransRec.byEntryMode==CARD_ENTRY_MANUAL)
		memcpy(szTempBuf2,"Manual",6);
	else if(srTransRec.byEntryMode==CARD_ENTRY_MSR)
		memcpy(szTempBuf2,"Swipe",5);
	else if(srTransRec.byEntryMode==CARD_ENTRY_FALLBACK)
		memcpy(szTempBuf2,"Fallback",8);
*/

    memset (szPrintBuf, 0x00, sizeof(szPrintBuf));
    strcpy(szPrintBuf, srTransRec.szAuthCode);
    //memset(&szPrintBuf[strlen(szPrintBuf)], 0x20, 29-strlen(srTransRec.szAuthCode));
    //strcat(szPrintBuf, szTempBuf2);
	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1,szPrintBuf , &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
	
	
	CTOS_PrinterFline(d_LINE_DOT * 1);

	
}

USHORT ushCTOS_GetFontInfor(void)
{
	USHORT usASCIIFontID;
	USHORT usFontSize;
	USHORT usFontStyle;

	CTOS_LanguagePrinterGetFontInfo( &usASCIIFontID, &usFontSize, &usFontStyle );   
	vdDebug_LogPrintf("usASCIIFontID[%d]usFontSize[%d]usFontStyle[%d]",usFontSize,usFontStyle );
}

USHORT ushCTOS_ReprintLastSettleReport(void)
{
	ACCUM_REC srAccumRec;
	unsigned char chkey;
	short shHostIndex;
	int inResult,inRet;
	int inTranCardType;
	int inReportType;
	int inIITNum , i;
	char szStr[d_LINE_SIZE + 1];
	BYTE baTemp[PAPER_X_SIZE * 64];

	if( printCheckPaper()==-1)
		return;
		
	//by host and merchant
	shHostIndex = inCTOS_SelectHostSetting();
	if (shHostIndex == -1)
		return;
	strHDT.inHostIndex = shHostIndex;
	DebugAddINT("summary host Index",shHostIndex);
	inCSTRead(strHDT.inCurrencyIdx);

	if (inMultiAP_CheckMainAPStatus() == d_OK)
	{
		inRet = inCTOS_MultiAPSaveData(d_IPC_CMD_REPRINT_LAST_SETT);
		if(d_OK != inRet)
			return inRet;
	}
	else
	{
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		{
			inRet = inCTOS_MultiAPGetData();
			if(d_OK != inRet)
				return inRet;

			inRet = inCTOS_MultiAPReloadHost();
			if(d_OK != inRet)
				return inRet;
		}
	}

	inResult = inCTOS_CheckAndSelectMutipleMID();
	DebugAddINT("summary MITid",srTransRec.MITid);
	if(d_OK != inResult)
		return;

	memset(&srAccumRec, 0x00, sizeof(ACCUM_REC));
	inResult = inCTOS_ReadBKAccumTotal(&srAccumRec,strHDT.inHostIndex,srTransRec.MITid);
	if(inResult == ST_ERROR)
	{
	    vdSetErrorMessage("NO RECORD FOUND");
		vdMyEZLib_LogPrintf("[vdUpdateAmountTotal]---Read Total Rec. error");
		return ST_ERROR;	
	}		 
	else if(inResult == RC_FILE_READ_OUT_NO_DATA)
	{
	    vdSetErrorMessage("NO RECORD FOUND");
		return;
	}	 
    strcpy(srTransRec.szTID, srAccumRec.szTID);
    strcpy(srTransRec.szMID, srAccumRec.szMID);
    memcpy(srTransRec.szYear, srAccumRec.szYear, DATE_BCD_SIZE);
    memcpy(srTransRec.szDate, srAccumRec.szDate, DATE_BCD_SIZE);
    memcpy(srTransRec.szTime, srAccumRec.szTime, TIME_BCD_SIZE);
    memcpy(srTransRec.szBatchNo, srAccumRec.szBatchNo, BATCH_NO_BCD_SIZE);

    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);

	CTOS_PrinterSetHeatLevel(4);
    
	ushCTOS_PrintHeader(0);	
    
    //vdPrintTitleCenter("LAST SETTLE");
	CTOS_PrinterFline(d_LINE_DOT * 1);

    //printHostLabel();
    
	printTIDMID();
    
	printDateTime();
    
	printBatchNO();

	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);

/* BDO PHASE2: [Print Settlement Closed for last settle receipt] -- sidumili*/	
#if 0
	if (srTransRec.byTransType == SETTLE)
		vdPrintCenter("SETTLEMENT CLOSED");
	else
		vdPrintCenter("SUMMARY REPORT");
#else
		vdPrintCenter("SETTLEMENT CLOSED");
#endif
/* BDO PHASE2: [Print Settlement Closed for last settle receipt] -- sidumili*/	

	
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);


    CTOS_PrinterFline(d_LINE_DOT * 1);
	for(inTranCardType = 0; inTranCardType < 1 ;inTranCardType ++)
	{
		inReportType = PRINT_CARD_TOTAL;
		
		if(inReportType == PRINT_CARD_TOTAL)
		{
			for(i= 0; i <20; i ++ )
			{
				vdDebug_LogPrintf("--Count[%d]", i);
				if((srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usRefundCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usVoidSaleCount == 0)
				&&(srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usReloadCCCount == 0))
					continue;
				
				vdDebug_LogPrintf("Count[%d]", i); 
				inIITRead(i);
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));
				strcpy(szStr,strIIT.szIssuerLabel);
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				
				vdCTOS_PrintAccumeByHostAndCard (inReportType, 
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount,	 (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulRefundTotalAmount), 
												
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulVoidSaleTotalAmount), 

												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulOffSaleTotalAmount),
//1010
												srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stCardTotal[i].ulReloadCCTotalAmount)
//1010

												);	
			}
			//after print issuer total, then print host toal
			{
			
				memset(szStr, ' ', d_LINE_SIZE);
				memset (baTemp, 0x00, sizeof(baTemp));
				strcpy(szStr,"TOTAL:");
				CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
				CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
				vdCTOS_PrintAccumeByHostAndCard (inReportType, 
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
													
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulRefundTotalAmount), 
													
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulVoidSaleTotalAmount), 

													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
//1010
													srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulReloadCCTotalAmount)
//1010

													);		
			}
		}
		else
		{
		
			memset(szStr, ' ', d_LINE_SIZE);
			memset (baTemp, 0x00, sizeof(baTemp));
			strcpy(szStr,srTransRec.szHostLabel);
			CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
			CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
			vdCTOS_PrintAccumeByHostAndCard (inReportType, 
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usSaleCount - srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount,   (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulSaleTotalAmount) - (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usRefundCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulRefundTotalAmount), 
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usVoidSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulVoidSaleTotalAmount), 

												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usOffSaleCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulOffSaleTotalAmount),
												
												srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.usReloadCCCount, (srAccumRec.stBankTotal[DEBIT_CARD].stHOSTTotal.ulReloadCCTotalAmount)

												);		
		}
	}
	
	//print space one line
	CTOS_PrinterFline(d_LINE_DOT * 2);		
	CTOS_PrinterFline(d_LINE_DOT * 2);
	CTOS_PrinterFline(d_LINE_DOT * 2);
	
	return d_OK;	
}

void vdCTOSS_PrinterBMPPic(unsigned int usX,unsigned int y, const char *path)
{
	char szBmpfile[50+1];
	
	memset(szBmpfile, 0x00, sizeof(szBmpfile));
	sprintf(szBmpfile,"%s%s", LOCAL_PATH, path);
	
	CTOS_PrinterBMPPic(usX, szBmpfile);
	return ;
}


//gcitra
extern char szField63[999];

USHORT ushCTOS_PrintCashLoyaltyBody(void)
{	
    char szStr[d_LINE_SIZE + 1];
    char szTemp[d_LINE_SIZE + 1];
    char szTemp1[d_LINE_SIZE + 1];
    char szTemp3[d_LINE_SIZE + 1];
    char szTemp4[d_LINE_SIZE + 1];
    char szTemp5[d_LINE_SIZE + 1];
    char szFormatPAN[strlen(srTransRec.szPAN) + 7];//to account for space as in PAN format and to include additional PAN no. 7 has been added -Meena 08/01/2012
    int inFmtPANSize;
    BYTE baTemp[PAPER_X_SIZE * 64];
    USHORT result;
    int num,i,inResult;
    unsigned char tucPrint [24*4+1];	
    BYTE   EMVtagVal[64];
    USHORT EMVtagLen; 
    short spacestring;
    BYTE   key;


    	char szTranType[d_LINE_SIZE + 1];


	char temp[30];
	char szRewardText[1000+1];
	char szRewardSize[4+1];
	int inRewardSize;
	char szPrintBuff[21+1];
	int inOffset;
	int inSizeofField63;
	
	char szCI[2+1];
	
	long lnInvNum;
	char temp2[21+1];


	ushCTOS_PrintHeader(d_FIRST_PAGE);

    	memset(szTemp1, ' ', d_LINE_SIZE);
    	sprintf(szTemp1,"%s",srTransRec.szHostLabel);
    	vdPrintCenter(szTemp1);
		
	printDateTime();

       printTIDMID(); 
		
	//printBatchInvoiceNO();
	memset(szTemp1,0x00,sizeof(szTemp1));
	wub_hex_2_str(srTransRec.szBatchNo,szTemp1,3);
    	sprintf(szStr, "INV#: %s", szTemp1);
    	memset (baTemp, 0x00, sizeof(baTemp));		

    	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
   	result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 


	//Reference num
	memset(szStr, ' ', d_LINE_SIZE);
	memset (baTemp, 0x00, sizeof(baTemp));					
	memset(szStr, ' ', d_LINE_SIZE);
	sprintf(szStr, "RREF NUM  : %s", srTransRec.szRRN);
	memset (baTemp, 0x00, sizeof(baTemp));		
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
	CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);


	sprintf(&szRewardSize[0], "%x ", szField63[0]);
	sprintf(&szRewardSize[1], "%02x ", szField63[1]);

	inSizeofField63=atoi(szRewardSize) +2;
	inRewardSize = atoi(szRewardSize) -2;

	inOffset = 0;

	memset(szRewardText, 0x00, sizeof(szRewardText));

	memcpy(szRewardText, (char*) &szField63[4], inRewardSize);

	memset(szCI, 0x00, sizeof(szCI));

	strncpy(szCI, (char*) &szField63[2], 2);

       memset(szTranType,0x00, sizeof(szTranType));
	if ((strcmp(szCI, "PZ") == 0) || (strcmp(szCI, "CI") == 0))
		strcpy(szTranType, "CUSTOMER REWARD");
	else if ((strcmp(szCI, "RN") == 0) || (strcmp(szCI, "CR") == 0))
		strcpy(szTranType, "CASHIER REWARD");
			
	CTOS_PrinterFline(d_LINE_DOT * 1); 
  	vdPrintTitleCenter(szTranType);    

       vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
        
	CTOS_PrinterFline(d_LINE_DOT * 1); 

	while(1){
		memset(szPrintBuff, 0x00, sizeof(szPrintBuff));

		for(i=0 ; (i < 21) && (inOffset < inRewardSize); i++){
			szPrintBuff[i] = szRewardText[inOffset];
			inOffset++;
		}
	

		memset (baTemp, 0x00, sizeof(baTemp));
		vdPrintCenter(szPrintBuff);

		if (inOffset >= inRewardSize)
			break;
	}

	CTOS_PrinterFline(d_LINE_DOT * 1); 
	vdPrintCenter("THANK YOU");

        vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);

	CTOS_PrinterFline(d_LINE_DOT * 6); 

/*second reward*/


	if ((szField63[inRewardSize+4] != (char) 0) || (szField63[inRewardSize+5] != (char) 0)) {


   		CTOS_LCDTClearDisplay();  
		CTOS_LCDTPrintXY(1,4,"Press any key to");
		CTOS_LCDTPrintXY(1,5,"Print");
		sprintf(temp2,"%s",szTranType);
		CTOS_LCDTPrintXY(1,6, temp2);


		WaitKey(60);

      	memset(szTranType, 0x00, sizeof(szTranType));
		if ((strcmp(szCI, "PZ") == 0) || (strcmp(szCI, "CI") == 0))
			strcpy(szTranType, "CUSTOMER REWARD");
		else if ((strcmp(szCI, "RN") == 0) || (strcmp(szCI, "CR") == 0))
			strcpy(szTranType, "CASHIER REWARD");

		ushCTOS_PrintHeader(d_FIRST_PAGE);

    	memset(szTemp1, ' ', d_LINE_SIZE);
    	sprintf(szTemp1,"%s",srTransRec.szHostLabel);
    	vdPrintCenter(szTemp1);
		
		printDateTime();

       	printTIDMID(); 
		
		//printBatchInvoiceNO();
		memset(szTemp1,0x00,sizeof(szTemp1));
		wub_hex_2_str(srTransRec.szBatchNo,szTemp1,3);
    		sprintf(szStr, "INV#: %s", szTemp1);
    		memset (baTemp, 0x00, sizeof(baTemp));		

    		CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
   		result = CTOS_PrinterBufferOutput((BYTE *)baTemp, 3); 


		//Reference num
		memset(szStr, ' ', d_LINE_SIZE);
		memset (baTemp, 0x00, sizeof(baTemp));					
		memset(szStr, ' ', d_LINE_SIZE);
		sprintf(szStr, "RREF NUM  : %s", srTransRec.szRRN);
		memset (baTemp, 0x00, sizeof(baTemp));		
		CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
		CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);


		sprintf(&szRewardSize[0], "%x ", szField63[0]);
		sprintf(&szRewardSize[1], "%02x ", szField63[1]);

		inSizeofField63=atoi(szRewardSize) +2;
		inRewardSize = atoi(szRewardSize) -2;

		inOffset = 0;

		memset(szRewardText, 0x00, sizeof(szRewardText));

		memcpy(szRewardText, (char*) &szField63[4], inRewardSize);

		memset(szCI, 0x00, sizeof(szCI));

		strncpy(szCI, (char*) &szField63[2], 2);

			
		CTOS_PrinterFline(d_LINE_DOT * 1); 
  		vdPrintTitleCenter(szTranType);    

       	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
        
		CTOS_PrinterFline(d_LINE_DOT * 1); 


		memset(szRewardSize, 0x00, sizeof(szRewardSize));

		sprintf(&szRewardSize[0], "%x ",szField63[inRewardSize+4]);
		sprintf(&szRewardSize[1], "%02x ", szField63[inRewardSize+5]);

		inOffset = inRewardSize+8;

		inRewardSize = atoi(szRewardSize) - 2;


		memset(szRewardText, 0x00, sizeof(szRewardText));


		memcpy(szRewardText, (char*) &szField63[inOffset], inRewardSize);


       vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
        
	CTOS_PrinterFline(d_LINE_DOT * 1); 


	inOffset = 0;

	while(1){
		memset(szPrintBuff, 0x00, sizeof(szPrintBuff));

		for(i=0 ; (i < 21) && (inOffset < inRewardSize); i++){
			szPrintBuff[i] = szRewardText[inOffset];
			inOffset++;
		}
	

		memset (baTemp, 0x00, sizeof(baTemp));
		vdPrintCenter(szPrintBuff);

		if (inOffset >= inRewardSize)
			break;
	}

	CTOS_PrinterFline(d_LINE_DOT * 1); 
	vdPrintCenter("THANK YOU");

	vdSetGolbFontAttrib(d_FONT_24x24, NORMAL_SIZE, NORMAL_SIZE, 0, 0);

	CTOS_PrinterFline(d_LINE_DOT * 6); 


		}
		
	return d_OK;;	
	
}

int inPrintISOPacket(unsigned char *pucTitle,unsigned char *pucMessage, int inLen)
{
    char ucLineBuffer[d_LINE_SIZE+4];
    unsigned char *pucBuff;
    int inBuffPtr = 0;
    BYTE baTemp[PAPER_X_SIZE * 64];
    char szStr[d_LINE_SIZE + 4];
	

    if (inLen <= 0)
        return(ST_SUCCESS);

	
	CTOS_PrinterSetWorkTime(50000,1000);
    inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_16x16,0," ");
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
    
    memset(szStr, 0x00, sizeof(szStr));
	memset(baTemp, 0x00, sizeof(baTemp));
    sprintf(szStr,"[%s] [%d] \n", pucTitle, inLen);
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);

		
    CTOS_PrinterFline(d_LINE_DOT); 
    
    
    pucBuff = pucMessage + inLen;
    while (pucBuff > pucMessage)
    {
    memset(ucLineBuffer,0x00, sizeof(ucLineBuffer));
    for (inBuffPtr = 0; (inBuffPtr < 44) && (pucBuff > pucMessage); inBuffPtr += 3)
    {
    sprintf(&ucLineBuffer[inBuffPtr], "%02X ", *pucMessage);
    pucMessage++;
    }
    ucLineBuffer[44] = '\n';
    memset (baTemp, 0x00, sizeof(baTemp));		
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, ucLineBuffer, &stgFONT_ATTRIB);
    CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
    
    } 
    CTOS_PrinterFline(d_LINE_DOT * 2); 
    
    
    return (ST_SUCCESS);
}

/*albert - start - August2014 - manual settlement*/
void vdCTOS_PrintManualPosting(void)
{
     vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
     vdPrintCenter("***FOR MANUAL POSTING***");
     vdPrintCenter("PLEASE SUBMIT TO BDO");
     vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, NORMAL_SIZE, 0, 0);
     CTOS_PrinterFline(d_LINE_DOT * 2);
	 
	 //print space one line
	 CTOS_PrinterFline(d_LINE_DOT * 2); 	 
	 CTOS_PrinterFline(d_LINE_DOT * 2);
	 CTOS_PrinterFline(d_LINE_DOT * 2);
}
/*albert - end - August2014 - manual settlement*/

int inPrintLeftRight(unsigned char *strLeft, unsigned char *strRight, int inMode) 
{
	char szStr[48+1]; 
    int inLength=0, inSize=0;
    BYTE baTemp[PAPER_X_SIZE * 64];
	
	//if(inMode == LENGTH_24)
        //inLength=LENGTH_24;
	//else if(inMode == LENGTH_32)
		//inLength=LENGTH_32;
	//else
	    //inLength=LENGTH_41;
	inLength=inMode;
	
	memset(szStr, 0x20, sizeof(szStr));
	inSize=strlen(strRight);
    memcpy(&szStr[inLength-inSize], strRight, inSize);
	inSize=strlen(strLeft);
    memcpy(szStr, strLeft, strlen(strLeft));
	
    memset (baTemp, 0x00, sizeof(baTemp));
    CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);

    return CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);
}

/***********************************************************************/
//sidumili: Fix on Issue#: 000149 [PRINT RECEIPT ON BALANCE INQ]
/***********************************************************************/
USHORT inCTOS_PrintBalanceInq(void)
{	
	char szStr[d_LINE_SIZE + 1];
	char szTemp[d_LINE_SIZE + 1];
	char szTemp1[d_LINE_SIZE + 1];
	char szTemp3[d_LINE_SIZE + 1];
	char szTemp4[d_LINE_SIZE + 1];
	char szTemp5[d_LINE_SIZE + 1];
	char szFormatPAN[strlen(srTransRec.szPAN) + 7];//to account for space as in PAN format and to include additional PAN no. 7 has been added -Meena 08/01/2012
	int inFmtPANSize;
	BYTE baTemp[PAPER_X_SIZE * 64];
	USHORT result;
	int num,i,inResult;
	unsigned char tucPrint [24*4+1];	
	BYTE   EMVtagVal[64];
	USHORT EMVtagLen; 
	short spacestring;
	BYTE   key;


		char szTranType[d_LINE_SIZE + 1];


	char temp[30];
	char szRewardText[1000+1];
	char szRewardSize[4+1];
	int inRewardSize;
	char szPrintBuff[21+1];
	int inOffset;
	int inSizeofField63;

	char szCI[2+1];

	long lnInvNum;
	char temp2[21+1];

	char szOutAmount[12+1];
	BYTE szDisplayBuf[40];
	BYTE szAmtBuf[40];
	BYTE szBuf[40];
	ULONG  ulAmount;

	if (srTransRec.byTransType != BALANCE_INQUIRY)
		return d_OK;

	if (strTCT.fEnablePrintBalanceInq == FALSE){
		return d_OK;
	}

	CTOS_PrinterSetHeatLevel(strTCT.inPrinterHeatLevel);
	
	if( printCheckPaper()==-1)
		return d_NO;

	vdSetPrintThreadStatus(1);

	if((inResult = inTCTSave(1)) != ST_SUCCESS)
	{
	vdDisplayErrorMsg(1, 8, "Update TCT fail");
	}

	inCTOS_SelectFont(d_FONT_FNT_MODE,d_FONT_24x24,0," ");
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

	CTOS_PrinterSetHeatLevel(strTCT.inPrinterHeatLevel);  

	
	ushCTOS_PrintHeader(d_FIRST_PAGE);

	printTIDMID(); 

	//card type
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
	sprintf(szStr, "CARD TYPE %s", srTransRec.szCardLable);
	vdMyEZLib_LogPrintf("Card label: %s",srTransRec.szCardLable);
	inPrint(szStr);

	//card number
	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
	memset(szDisplayBuf,0,sizeof(szDisplayBuf));
	vdCTOS_FormatPAN(strIIT.szPANFormat, srTransRec.szPAN, szDisplayBuf);
	inPrint(szDisplayBuf);
	
	//card holder name
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
	printCardHolderName();

	//Trans type
	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
	szGetTransTitle(srTransRec.byTransType, szStr);     
	inPrint(szStr);    

	#if 0
	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
	memset(EMVtagVal, 0x00, sizeof(EMVtagVal));
	EMVtagLen = 0;
	memset(szStr, ' ', d_LINE_SIZE);
	vdMyEZLib_LogPrintf("CDT index: %d",srTransRec.CDTid);
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

	//Exp date and Entry mode
	memset(szStr, ' ', d_LINE_SIZE);
	memset(szTemp, 0, sizeof(szTemp));
	memset(szTemp1, 0, sizeof(szTemp1));
	memset(szTemp4, 0, sizeof(szTemp4));
	memset(szTemp5, 0, sizeof(szTemp5));
	wub_hex_2_str(srTransRec.szExpireDate, szTemp,EXPIRY_DATE_BCD_SIZE);
	DebugAddSTR("EXP",szTemp,12);  

	for (i =0; i<4;i++)
		szTemp[i] = '*';
	memcpy(szTemp4,&szTemp[0],2);
	memcpy(szTemp5,&szTemp[2],2);

	if(srTransRec.byEntryMode==CARD_ENTRY_ICC)
		memcpy(szTemp1,"Chip",4);
	else if(srTransRec.byEntryMode==CARD_ENTRY_MANUAL)
		memcpy(szTemp1,"Manual",6);
	else if(srTransRec.byEntryMode==CARD_ENTRY_MSR)
		memcpy(szTemp1,"MSR",3);
	else if(srTransRec.byEntryMode==CARD_ENTRY_FALLBACK)
		memcpy(szTemp1,"Fallback",8);
	else if(srTransRec.byEntryMode==CARD_ENTRY_WAVE)
	{
		if ('4' ==srTransRec.szPAN[0])
			memcpy(szTemp1,"PayWave",7);
		if ('5' ==srTransRec.szPAN[0])
			memcpy(szTemp1,"PayPass",7);
	}
	#endif

	//date/time
	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);
	printDateTime();

	memset(szStr, ' ', d_LINE_SIZE);
	memset(szTemp, ' ', d_LINE_SIZE);
	memset(szTemp1, ' ', d_LINE_SIZE);
	memset(szTemp3, ' ', d_LINE_SIZE);

	// Amount
	vdSetGolbFontAttrib(d_FONT_16x16, DOUBLE_SIZE, DOUBLE_SIZE, 0, 0);
	memset(szStr, ' ', d_LINE_SIZE);
	memset(szOutAmount, 0x00, sizeof(szOutAmount));
	memset(szBuf, 0x00, sizeof(szBuf));
	memset(szAmtBuf, 0x00, sizeof(szAmtBuf));
	
	memset(szBuf, 0x00, sizeof(szBuf));
	sprintf(szBuf, "%02X%02X%02X%02X%02X%02X", (unsigned char)srTransRec.szBalInqAmount[0], (unsigned char)srTransRec.szBalInqAmount[1], (unsigned char)srTransRec.szBalInqAmount[2], 
																						 (unsigned char)srTransRec.szBalInqAmount[3], (unsigned char)srTransRec.szBalInqAmount[4], (unsigned char)srTransRec.szBalInqAmount[5]);

	if (strTCT.fDemo){
		strcpy(szBuf, "1234567890");
	}
	
	vdCTOS_FormatAmount("NNN,NNN,NNn.nn", szBuf,szAmtBuf);
	sprintf(szDisplayBuf, "BAL: %s", szAmtBuf);
	inPrint(szDisplayBuf);

	vdSetGolbFontAttrib(d_FONT_16x16, NORMAL_SIZE, DOUBLE_SIZE, 0, 0);

	CTOS_PrinterFline(d_LINE_DOT * 6);
		
	return d_OK;
	
}
/***********************************************************************/

int inPrint(unsigned char *strPrint) 
{
	char szStr[42] = {0}; 
	BYTE baTemp[PAPER_X_SIZE * 64] = {0};

	memset(szStr, 0x00, sizeof(szStr));
	memcpy(szStr, strPrint, strlen(strPrint));

	memset (baTemp, 0x00, sizeof(baTemp));
	CTOS_PrinterBufferPutString((BYTE *)baTemp, 1, 1, szStr, &stgFONT_ATTRIB);
	return CTOS_PrinterBufferOutput((BYTE *)baTemp, 3);  
}

//sidumili: Issue#000135 [Print Footer Logo]
void vdCTOSS_PrintFooterLogoBMPPic(unsigned int usX,unsigned int y, const char *path)
{
char szBmpfile[50+1];
memset(szBmpfile, 0x00, sizeof(szBmpfile));
sprintf(szBmpfile,"%s%s", PUBLIC_PATH, path);
CTOS_PrinterBMPPic(usX, szBmpfile);
return ;
}

